import junit.framework.TestCase;
import net.redborder.malware.controllers.MalwareTaskController;
import net.redborder.malware.config.Config;
import net.redborder.malware.tasks.*;
import java.util.HashMap;
import java.util.Map;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import org.junit.runner.RunWith;
import org.mockito.runners.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class MalwareTaskControllerTest extends TestCase{

    private MalwareTaskController taskController;
    private int completedTask = 0;

//    @Before
//    public void init(){
//        taskController = new MalwareTaskController(Config.createConfig());
//    }

    @After
    public void shutdown(){
        taskController.shutdown();
    }


    @Test
    public void listenerWorksCorrectly(){

        Task tarea = new AbstractTask(){

            @Override
            public Class<?> getTaskResultType() {
                return Map.class;
            }

            @Override
            protected Object doTaskImpl(TaskMonitor monitor) {
                Map<String, String> mapa = new HashMap<>();
                for (int i = 0; i <1000; i++) {
                    mapa.put(String.format("tag%d", i), String.format("value%d", i));
                }

                return mapa;
            }
        };


        TaskCompletionListener listener = new TaskCompletionListener() {
            @Override
            public void taskCompleted(Worker task) {
                completedTask++;

                System.out.println("Tarea completada? : " + task.isComplete());
                System.out.println("Estado tarea : " + task.getCurrentStatusString());
                System.out.println("Tiempo tarea : " + task.getCPUSecondsElapsed() + " segundos");
                Map<String, String> resultado = (Map<String, String>)task.getFinalResult();
                System.out.println(resultado.toString());
                assertTrue(task.isComplete());
            }
        };

        taskController.runTask(tarea, listener);

        try {
            Thread.sleep(5000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        assertEquals(1, completedTask);
    }


}
