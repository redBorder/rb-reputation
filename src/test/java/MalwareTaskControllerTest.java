import junit.framework.TestCase;
import net.redborder.malware.controllers.MalwareTaskController;
import net.redborder.malware.config.Config;
import net.redborder.malware.tasks.*;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import org.junit.runner.RunWith;
import org.mockito.runners.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class MalwareTaskControllerTest extends TestCase{

    private MalwareTaskController taskController;
    private PriorityBlockingQueue<Object> priorityQueue;
    private LinkedBlockingQueue<Object> resultQueue;
    private int completedTask = 0;

    @Before
    public void init(){
        priorityQueue = new PriorityBlockingQueue<>();
        resultQueue = new LinkedBlockingQueue<>();
        taskController = new MalwareTaskController(Config.createConfig(), priorityQueue, resultQueue);
    }

    @After
    public void shutdown(){
        taskController.shutdown();
    }


    @Test
    public void queueBlokingWorksCorrectly(){

        ReputationTask tarea = new ReputationTask(Config.createConfig(), Config.createConfig(), priorityQueue, resultQueue);

        tarea.setTaskName("Reputation system");

        taskController.runTask(tarea, tarea);

        try {
            assertEquals(0, priorityQueue.size());
            assertEquals(0, resultQueue.size());
            Thread.sleep(1000);
            priorityQueue.put("Elemento prioritario");
            Thread.sleep(1000);
            assertEquals(0, priorityQueue.size());
            assertEquals(1, resultQueue.size());
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void listenerWorksCorrectly(){

        AbstractTask tarea = new AbstractTask(){

            @Override
            public Class<?> getTaskResultType() {
                return Map.class;
            }

            @Override
            protected Object doTaskImpl(TaskMonitor monitor) {
                Map<String, String> mapa = new HashMap<>();

                for (int i = 0; i <1000; i++) {
                    mapa.put(String.format("tag%d", i), String.format("value%d", i));
                }

                return mapa;
            }

            @Override
            protected void shutdownImpl() {

            }
        };

        tarea.setTaskName("Counter task");

        TaskCompletionListener listener = new TaskCompletionListener() {
            @Override
            public void taskCompleted(Worker task) {
                completedTask++;

                System.out.println("Tarea completada? : " + task.isComplete());
                System.out.println("Estado tarea : " + task.getCurrentStatusString());
                System.out.println("Tiempo tarea : " + task.getCPUSecondsElapsed() + " segundos");
            }
        };

        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        taskController.runTask(tarea, listener);

        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        assertEquals(1, completedTask);
    }


}
