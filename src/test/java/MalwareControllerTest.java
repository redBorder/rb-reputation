import junit.framework.TestCase;
import net.redborder.malware.config.Config;
import net.redborder.malware.controllers.MalwareController;
import org.apache.curator.test.TestingServer;
import org.junit.Before;
import org.junit.runner.RunWith;
import org.junit.Test;
import org.mockito.runners.MockitoJUnitRunner;

import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;

@RunWith(MockitoJUnitRunner.class)

public class MalwareControllerTest extends TestCase {

    private TestingServer zooKeeperServer;

    @Before
    public void init(){

        try {
            zooKeeperServer = new TestingServer();
            zooKeeperServer.start();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    @Test
    public void multipleNodesTest(){

        Config.clearConfiguration();
        Config.add("zookeeper.connect", String.valueOf(zooKeeperServer.getConnectString()));
        Config.add("malware.zkWorkspace","malware_list");

        PriorityBlockingQueue<Object> pQueue = new PriorityBlockingQueue<>();
        LinkedBlockingQueue<Object> rQueue = new LinkedBlockingQueue<>();

        MalwareController mc1 = new MalwareController(Config.createConfig(),pQueue,rQueue);
        final MalwareController mc2 = new MalwareController(Config.createConfig(),pQueue,rQueue);
        final MalwareController mc3 = new MalwareController(Config.createConfig(),pQueue,rQueue);

        mc1.start();

        new Thread(new Runnable(){

            @Override
            public void run() {
                mc2.start();
            }
        }).start();

        new Thread(new Runnable(){

            @Override
            public void run() {
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                mc3.start();
            }
        }).start();

        mc1.shutdown();

        try {
            Thread.sleep(1000);

        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        mc2.shutdown();

        try {
            Thread.sleep(1500);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        mc3.shutdown();
    }

}
