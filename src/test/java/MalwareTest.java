import junit.framework.TestCase;

import net.redborder.malware.IncrementalList;
import org.apache.commons.math3.distribution.ExponentialDistribution;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.runners.MockitoJUnitRunner;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.LinkedBlockingQueue;


@RunWith(MockitoJUnitRunner.class)

public class MalwareTest extends TestCase {

    LinkedBlockingQueue<Map<String, Object>> queue = new LinkedBlockingQueue<>();

    int OFFSET = 0;

    @Before
    public void init() {
        OFFSET = 2;
    }

    @Test
    public void generateRevisionListTest() {
        Map<String, Object> json1 = new HashMap<>();
        json1.put("tag1", "value1");
        json1.put("tag2", "value2");
        json1.put("tag3", "value3");
        json1.put("tag4", "value4");

        Map<String, Object> json2 = new HashMap<>();
        json2.put("tag5", "value5");
        json2.put("tag6", "value6");
        json2.put("tag7", "value7");
        json2.put("tag8", "value8");

        Map<String, Object> json3 = new HashMap<>();
        json3.put("tag9", "value9");
        json3.put("tag10", "value10");
        json3.put("tag11", "value11");
        json3.put("tag12", "value12");

     /*   try {
            ExponentialDistribution expDist = new ExponentialDistribution(5);

            IncrementalList malwareList = new IncrementalList(OFFSET, queue);

            assertTrue(malwareList.getCurrentRevision().isEmpty());

            Thread.sleep((long) expDist.sample() * 1000L);
            queue.put(json1);
            Thread.sleep((long) expDist.sample() * 1000L);
            queue.put(json2);
            Thread.sleep((long) expDist.sample() * 1000L);
            queue.put(json3);
            Thread.sleep(2000);

            assertEquals(3, malwareList.getCurrentRevision().size());

            malwareList.stopContinuousQuery();

        } catch (InterruptedException e) {
                e.printStackTrace();
        }

    }

    @Test
    public void finishRevisionListIncrementalNumberTest(){

        IncrementalList malwareList = new IncrementalList(OFFSET, queue);

        assertEquals(0, malwareList.getRevisionNumber());
        malwareList.finishCurrentRevision();
        assertEquals(1, malwareList.getRevisionNumber());
    }

    @Test
    public void finishRevisionListRemoveOffsetTest(){

        IncrementalList malwareList = new IncrementalList(OFFSET, queue);

        assertEquals(0, malwareList.getRevisionNumber());

        malwareList.finishCurrentRevision();
        malwareList.finishCurrentRevision();
        malwareList.finishCurrentRevision();

        assertEquals(3, malwareList.getRevisionNumber());

        assertNotNull(malwareList.getRevNum(2));
        assertNull(malwareList.getRevNum(1));

    }*/

    }
}
