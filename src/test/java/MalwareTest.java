import junit.framework.TestCase;
import kafka.admin.AdminUtils;
import kafka.consumer.Consumer;
import kafka.consumer.ConsumerConfig;
import kafka.javaapi.consumer.ConsumerConnector;
import kafka.javaapi.producer.Producer;
import kafka.producer.KeyedMessage;
import kafka.producer.ProducerConfig;
import kafka.server.KafkaConfig;
import kafka.server.KafkaServer;
import kafka.utils.TestUtils;
import kafka.utils.Time;
import kafka.utils.*;
import kafka.zk.EmbeddedZookeeper;

import net.redborder.malware.MalwareRevisionList;
import net.redborder.malware.config.Config;
import net.redborder.malware.managers.KafkaManager;
import org.I0Itec.zkclient.ZkClient;
import org.apache.curator.test.TestingServer;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.runners.MockitoJUnitRunner;

import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.Random;
import java.util.concurrent.LinkedBlockingQueue;


@RunWith(MockitoJUnitRunner.class)

public class MalwareTest extends TestCase {

    LinkedBlockingQueue<Map<String,Object>> queue = new LinkedBlockingQueue<>();
    MalwareRevisionList malwareList;

    @Before
    public void init(){
        int offset = 2;
        malwareList = new MalwareRevisionList(offset, queue);
        malwareList.startContinuousQuery();
    }

    @After
    public void shutdown(){
        malwareList.stopContinuousQuery();
    }

    @Test
    public void GenerateRevisionList(){
        Map<String, Object> json1 = new HashMap<>();
        json1.put("tag1","value1");
        json1.put("tag2","value2");
        json1.put("tag3","value3");
        json1.put("tag4","value4");

        Map<String, Object> json2 = new HashMap<>();
        json2.put("tag5","value5");
        json2.put("tag6","value6");
        json2.put("tag7","value7");
        json2.put("tag8","value8");

        Map<String, Object> json3 = new HashMap<>();
        json3.put("tag9","value9");
        json3.put("tag10","value10");
        json3.put("tag11","value11");
        json3.put("tag12","value12");

        try {

            queue.put(json1);
            queue.put(json2);
            queue.put(json3);

            assertFalse(malwareList.getCurrentRevision().isEmpty());

            assertEquals(3, malwareList.getCurrentRevision().size());

        } catch (InterruptedException e) {
            e.printStackTrace();
        }

    }

}
