package net.redborder.malware.modules.output;

import com.aerospike.client.Bin;
import com.aerospike.client.Host;
import com.aerospike.client.Key;
import com.aerospike.client.Record;
import com.aerospike.client.async.AsyncClient;
import com.aerospike.client.async.AsyncClientPolicy;
import com.aerospike.client.policy.RecordExistsAction;
import com.aerospike.client.policy.WritePolicy;
import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AeroSpikeOutputModule extends AbstractOutputModule {

    private static final Logger log = LoggerFactory.getLogger(AeroSpikeOutputModule.class);

    private AsyncClient aerospikeClient;
    private List<String> hosts;
    Integer timeout;
    WritePolicy writePolicy;
    String collection;
    String namespace;

    public AeroSpikeOutputModule(Config conf) {
        super(conf);

    }

    @Override
    public void init() {
        reload();
    }

    @Override
    public void reload() {

        try {

            this.hosts = config.getList("aerospike.servers");
            this.timeout = config.getInt("aerospike.clientTimeout", 500);
            this.namespace = config.get("aerospike.namespace");
            this.writePolicy = new WritePolicy();
            this.writePolicy.recordExistsAction = RecordExistsAction.UPDATE;

        } catch (ConfigException e) {
            e.printStackTrace();
        }

        List<Host> servers = new ArrayList<>();

        for (String host : hosts) {
            String[] sp = host.split(":");
            servers.add(new Host(sp[0], Integer.valueOf(sp[1])));
        }

        AsyncClientPolicy cPolicy = new AsyncClientPolicy();
        cPolicy.timeout = timeout;

        aerospikeClient = new AsyncClient(cPolicy, servers.toArray(new Host[servers.size()]));

    }

    @Override
    public void shutdownImpl() {

        if (aerospikeClient.isConnected())
            aerospikeClient.close();
    }

    @Override
    public void writeImpl(Object obj) {

        Map<String, Object> value = (HashMap<String, Object>) obj;

        String targetKey = value.get("sha256").toString();
        value.remove("sha256");

        Key key = new Key(namespace, collection, targetKey);

        aerospikeClient.put(writePolicy, key, new Bin("sha256", targetKey));

        for (Map.Entry entry : value.entrySet()) {

            Bin bin = new Bin(String.format("rt_%s", entry.getKey().toString().toLowerCase()), entry.getValue());
            aerospikeClient.put(writePolicy, key, bin);
        }

        aerospikeClient.put(writePolicy, key, new Bin("g_rt_score", 0));
        aerospikeClient.put(writePolicy, key, new Bin("score", 0));

    }

    @Override
    public String getOutputModuleName() {
        return "AeroSpike";
    }

    @Override
    public void update(Map<String, Object> dataUpdate) {

        Map<String, Map<String, Object>> malwareScores = new HashMap<>();


        log.info("Updating for values : {}", dataUpdate);

        Map<String, Object> weights = (Map<String, Object>) dataUpdate.get("weights");
        dataUpdate.remove("weights");


        // Reputation engine content
        for (Map.Entry<String, Object> reputationEngine : dataUpdate.entrySet()) {

            log.info("Updating from engine {}", reputationEngine.getKey());
            ArrayList<Map<String, Object>> results = (ArrayList<Map<String, Object>>) reputationEngine.getValue();

            // "record" from reputation engine (hash, ip or url)
            for (Map<String, Object> result : results) {

                log.trace("Content for {} : {}", reputationEngine.getKey(), results);

                for (Map.Entry<String, Object> entry : result.entrySet()) {

                    if(entry.getKey().matches("(?:hash|url|ip)")){

                        Map<String, Double> specificWeights = (Map<String, Double>) weights.get(entry.getKey());

                        if(!malwareScores.containsKey(entry.getKey()))
                            malwareScores.put(entry.getKey(), new HashMap<String, Object>());

                        malwareScores.get(entry.getKey()).put(reputationEngine.getKey(), result.get("score"));

                        log.trace("Updating for {} with value {}", entry.getKey(), entry.getValue());
                        malwareScores.get(entry.getKey()).put(entry.getKey(), entry.getValue());

                        collection = String.format("%sScores", entry.getKey());
                        log.trace("Updating in {}", String.format("%s.%s", namespace, collection));

                        Key key = new Key(namespace, collection, entry.getValue().toString());
                        log.trace("Creating key : {}", entry.getKey().toString());

                        // Getting record
                        Record record = aerospikeClient.get(writePolicy, key);

                        log.trace("Getting record for key {}", entry.getValue());

                        Long sectionScore = -1L;
                        Long globalScore = -1L;

                        // If record is not null
                        if (record != null) {
                            // Getting bins as map
                            Map<String, Object> scores = record.bins;
                            log.trace("Record exists : {}", scores);
                            // And fill malwareScores map created previously
                            malwareScores.get(entry.getKey()).putAll(scores);
                        } else {
                            log.trace("Record not exists");
                        }

                        log.trace("Current record for {} : ", entry.getKey(), malwareScores.get(entry.getKey()));

                        for(Map.Entry<String, Object> field : malwareScores.get(entry.getKey()).entrySet()){

                            if(field.getKey().matches("rt_\\w+")){

                                log.trace("Calculate values for {}", field.getKey());
                                Double score = Double.valueOf(field.getValue().toString());
                                Double weight = Double.valueOf(specificWeights.containsKey(field.getKey()) ? specificWeights.get(field.getKey()).toString() : "0.0" );

                                log.trace("Updating {} with {} ", field.getKey(), String.format("score %s and weight %s", score, weight));

                                malwareScores.get(entry.getKey()).put(field.getKey(), Double.valueOf(field.getValue().toString()).longValue());

                                if(score >= 0) {
                                    if(sectionScore < 0) sectionScore = 0L;
                                    sectionScore += Double.valueOf(score * weight).longValue();
                                    log.trace("Section score {}" , sectionScore);
                                }

                            }
                        }

                        malwareScores.get(entry.getKey()).put("g_rt_score", sectionScore);

                        log.info("Update g_rt_score with score {}", sectionScore);

                        for(Map.Entry<String, Object> field : malwareScores.get(entry.getKey()).entrySet()){

                            if(field.getKey().matches("g_\\w+") && field.getKey().contains("score")){
                                Double localScore = Double.valueOf(field.getValue().toString());
                                Double weight = Double.valueOf(specificWeights.containsKey(field.getKey()) ? specificWeights.get(field.getKey()).toString() : "0.0");

                                if(localScore >= 0) {
                                    if(globalScore < 0) globalScore = 0L;
                                    globalScore += Double.valueOf(localScore * weight).longValue();
                                }
                            }

                        }

                        malwareScores.get(entry.getKey()).put("score", globalScore);

                        log.info("Update global score with {}", globalScore);

                        log.trace("Complete malware scores : {}", malwareScores);

                        // Update all bins rt_*
                        for(Map.Entry<String, Object> bins : malwareScores.get(entry.getKey()).entrySet()) {
                            aerospikeClient.put(writePolicy, key, new Bin(bins.getKey(), bins.getValue()));
                        }

                    }

                }// Result for hash, ip, url, etc... (values of Reputation Engine)

            }// Results for Reputation Engine

        }// Reputation Engine

        // Create key

    }

}
