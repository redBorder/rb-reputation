package net.redborder.malware.modules.output;

import com.aerospike.client.Bin;
import com.aerospike.client.Host;
import com.aerospike.client.Key;
import com.aerospike.client.Record;
import com.aerospike.client.async.AsyncClient;
import com.aerospike.client.async.AsyncClientPolicy;
import com.aerospike.client.policy.RecordExistsAction;
import com.aerospike.client.policy.WritePolicy;
import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class AeroSpikeOutputModule extends AbstractOutputModule {

    private static final Logger log = LoggerFactory.getLogger(AeroSpikeOutputModule.class);

    private AsyncClient aerospikeClient;
    private List<String> hosts;
    Integer timeout;
    WritePolicy writePolicy;
    Config config;
    String collection;
    String namespace;

    public AeroSpikeOutputModule(Config conf) {
        super(conf);

        try {
            config = new Config(String.format("%s/aerospike.properties", conf.get("malware.controller.datamodules.configpath")));

            this.hosts = config.getList("aerospike.servers");
            this.timeout = config.getInt("aerospike.clientTimeout", 500);
            this.collection = config.get("aerospike.collection");
            this.namespace = config.get("aerospike.namespace");
            this.writePolicy = new WritePolicy();
            this.writePolicy.recordExistsAction = RecordExistsAction.UPDATE;

        } catch (ConfigException e) {
            e.printStackTrace();
        }


    }

    @Override
    public void init() {

        List<Host> servers = new ArrayList<>();

        for (String host : hosts){
            String[] sp = host.split(":");
            servers.add(new Host(sp[0], Integer.valueOf(sp[1])));
        }

        AsyncClientPolicy cPolicy = new AsyncClientPolicy();
        cPolicy.timeout = timeout;

        aerospikeClient = new AsyncClient(cPolicy, servers.toArray(new Host[servers.size()]));

    }

    @Override
    public void shutdownImpl() {

        if(aerospikeClient.isConnected())
            aerospikeClient.close();
    }

    @Override
    public void writeImpl(Object obj) {

        Map<String, Object> value = (HashMap<String, Object>) obj;

        String targetKey = value.get("sha256").toString();
        value.remove("sha256");

        Key key = new Key(namespace, collection, targetKey);

        aerospikeClient.put(writePolicy, key ,new Bin("sha256", targetKey));

        for(Map.Entry entry : value.entrySet()){

            Bin bin = new Bin(String.format("rt_%s", entry.getKey().toString().toLowerCase()), entry.getValue());
            aerospikeClient.put(writePolicy, key, bin);
        }

            aerospikeClient.put(writePolicy, key ,new Bin("g_rt_score", 0));
            aerospikeClient.put(writePolicy, key ,new Bin("score", 0));

    }

    @Override
    public String getOutputModuleName() {
        return "AeroSpike";
    }

    @Override
    public void update(Map<String, Object> dataUpdate) {
        log.info("Updating for values : {}", dataUpdate);

        Map<String, Object> weights = (Map<String, Object>) dataUpdate.get("weights");

        // Create key
        Key key = new Key(namespace, collection, dataUpdate.get("hash").toString());

        log.info("Updating in {}", String.format("%s.%s", namespace, collection));

        // Getting record
        Record record = aerospikeClient.get(writePolicy, key);

        log.info("Getting record for key {}", key.userKey);

        Long sectionScore = 0L;
        Long globalScore = 0L;

        // Create new map for malware scores
        Map<String, Object> malwareScores = new HashMap<>();

        // If record is not null
        if(record != null){
            // Getting bins as map
            Map<String, Object> scores = record.bins;
            log.info("Record exists : {}", scores);
            // And fill malwareScores map created previously
            malwareScores.putAll(scores);
        }else{
            log.info("Record not exists");
        }

        // Update all bins rt_*
        for(Map.Entry<String, Object> entry : ((Map<String, Object>)dataUpdate.get("malwareScores")).entrySet()){

            if(entry.getKey().matches("rt_\\w+")){
                log.info("Calculate values for {}", entry.getKey());
                Map<String, Object> reputationServiceData = (Map<String, Object>) entry.getValue();
                Double score = Double.valueOf(reputationServiceData.get("score").toString());
                Double weight = Double.valueOf(weights.containsKey(entry.getKey()) ? weights.get(entry.getKey()).toString() : "0.0");

                log.info("Updating {} with {} ", entry.getKey(), String.format("score %s and weight %s", score, weight));

                malwareScores.put(entry.getKey(), Double.valueOf(reputationServiceData.get("score").toString()).longValue());

                if(score >= 0) {
                    sectionScore += Double.valueOf(score * weight).longValue();
                    log.info("Section score {}" , sectionScore);
                }

            }

        }

        malwareScores.put("g_rt_score", sectionScore);

        log.info("Update g_rt_score with score {}", sectionScore);

        for(Map.Entry<String, Object> entry : malwareScores.entrySet()){
            if(entry.getKey().matches("g_\\w+") && entry.getKey().contains("score")){
                Double localScore = Double.valueOf(entry.getValue().toString());
                Double weight = Double.valueOf(weights.containsKey(entry.getKey()) ? weights.get(entry.getKey()).toString() : "0.0");

                if(localScore >= 0)
                    globalScore += Double.valueOf(localScore * weight).longValue();
            }
        }

        malwareScores.put("score", globalScore);

        log.info("Update global score with {}", globalScore);

        log.info("Complete malware scores : {}", malwareScores);
        malwareScores.put("hash", dataUpdate.get("hash"));

        for(Map.Entry<String, Object> entry : malwareScores.entrySet()) {
            log.info("Write {} in {}", entry.getValue(), entry.getKey());
            aerospikeClient.put(writePolicy, key, new Bin(entry.getKey(), entry.getValue()));
        }
    }

}
