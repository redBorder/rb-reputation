package net.redborder.malware.modules.output;

import com.aerospike.client.Bin;
import com.aerospike.client.Host;
import com.aerospike.client.Key;
import com.aerospike.client.async.AsyncClient;
import com.aerospike.client.async.AsyncClientPolicy;
import com.aerospike.client.policy.RecordExistsAction;
import com.aerospike.client.policy.WritePolicy;
import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class AeroSpikeOutputModule extends AbstractOutputModule {

    private AsyncClient aerospikeClient;
    private List<String> hosts;
    Integer timeout;
    WritePolicy writePolicy;
    Config config;
    String collection;
    String namespace;

    public AeroSpikeOutputModule(Config conf) {
        super(conf);

        try {
            config = new Config(String.format("%s/aerospike.properties", conf.get("malware.controller.datamodules.configpath")));

            this.hosts = config.getList("aerospike.servers");
            this.timeout = config.getInt("aerospike.clientTimeout", 500);
            this.collection = config.get("aerospike.collection");
            this.namespace = config.get("aerospike.namespace");
            this.writePolicy = new WritePolicy();
            this.writePolicy.recordExistsAction = RecordExistsAction.UPDATE;

        } catch (ConfigException e) {
            e.printStackTrace();
        }


    }

    @Override
    public void init() {

        List<Host> servers = new ArrayList<>();

        for (String host : hosts){
            String[] sp = host.split(":");
            servers.add(new Host(sp[0], Integer.valueOf(sp[1])));
        }

        AsyncClientPolicy cPolicy = new AsyncClientPolicy();
        cPolicy.timeout = timeout;

        aerospikeClient = new AsyncClient(cPolicy, servers.toArray(new Host[servers.size()]));

    }

    @Override
    public void shutdownImpl() {

        if(aerospikeClient.isConnected())
            aerospikeClient.close();
    }

    @Override
    public void writeImpl(Object obj) {

        Map<String, Object> value = (HashMap<String, Object>) obj;

        String targetKey = value.get("sha256").toString();
        value.remove("sha256");

        Key key = new Key(namespace, collection, targetKey);

        aerospikeClient.put(writePolicy, key ,new Bin("sha256", targetKey));

        for(Map.Entry entry : value.entrySet()){

            Bin bin = new Bin(String.format("rt_%s", entry.getKey().toString().toLowerCase()), entry.getValue());
            aerospikeClient.put(writePolicy, key, bin);
        }

            aerospikeClient.put(writePolicy, key ,new Bin("g_rt_score", 0));
            aerospikeClient.put(writePolicy, key ,new Bin("score", 0));

    }

    @Override
    public String getOutputModuleName() {
        return "AeroSpike";
    }
}
