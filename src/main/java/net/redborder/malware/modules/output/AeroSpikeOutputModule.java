package net.redborder.malware.modules.output;

import com.aerospike.client.Bin;
import com.aerospike.client.Host;
import com.aerospike.client.Key;
import com.aerospike.client.async.AsyncClient;
import com.aerospike.client.async.AsyncClientPolicy;
import com.aerospike.client.policy.RecordExistsAction;
import com.aerospike.client.policy.WritePolicy;
import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class AeroSpikeOutputModule extends AbstractOutputModule {

    private AsyncClient aerospikeClient;
    private List<String> hosts;
    Integer timeout;
    WritePolicy writePolicy;
    private String collection = null;
    private String namespace = null;

    public AeroSpikeOutputModule(Config conf) {
        super(conf);

        try {
            this.hosts = conf.getList("aerospike.servers");
            this.timeout = conf.getInt("aerospike.clientTimeout", 500);
            this.collection = conf.get("aerospike.collection");
            this.namespace = conf.get("aerospike.namespace");

            this.writePolicy = new WritePolicy();
            this.writePolicy.recordExistsAction = RecordExistsAction.UPDATE;

        } catch (ConfigException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void init() {
        List<Host> servers = new ArrayList<>();

        for (String host : hosts){
            Matcher m;

            if((m = Pattern.compile("(?<name>\\w+)\\:(?<port>\\d+)").matcher(host)).matches()){
                servers.add(new Host(m.group("name"), Integer.valueOf(m.group("port"))));
            }
        }

        AsyncClientPolicy cPolicy = new AsyncClientPolicy();
        cPolicy.timeout = timeout;

        aerospikeClient = new AsyncClient(cPolicy, servers.toArray(new Host[servers.size()]));

    }

    @Override
    public void shutdown() {

        if(aerospikeClient.isConnected())
            aerospikeClient.close();
    }

    @Override
    public void write(Object obj) {

        Key key = new Key(namespace,collection,obj.toString());
        Bin bin = new Bin("sha256",obj);

        aerospikeClient.put(writePolicy,key,bin);

    }

    @Override
    public String getOutputModuleName() {
        return "AeroSpike";
    }
}
