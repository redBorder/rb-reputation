package net.redborder.malware.modules.output;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import kafka.javaapi.producer.Producer;
import kafka.producer.KeyedMessage;
import kafka.producer.ProducerConfig;
import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Map;

public class KafkaOutputModule extends AbstractOutputModule {

    private static final Logger log = LoggerFactory.getLogger(KafkaOutputModule.class);

    private ProducerConfig pConf;
    private Producer<String, String> producer;
    private String topic;

    private ObjectMapper mapper;
    public KafkaOutputModule(Config conf) {
        super(conf);
    }

    @Override
    public void init() {
        pConf = new ProducerConfig(config.getProperties());
        producer = new Producer<>(pConf);

        try {
            topic = config.get("kafka.topic");
            log.info("Output topic : {}" , topic);
        } catch (ConfigException e) {
            e.printStackTrace();
        }

        mapper = new ObjectMapper();
    }

    private void sendMessage(Object obj){

        log.info("Sendding message : {}", obj.toString());

        try {
            String json = mapper.writeValueAsString(obj);
            producer.send(new KeyedMessage<String, String>(topic, json));
        } catch (JsonProcessingException e) {
            e.printStackTrace();
        }

    }

    @Override
    public void shutdownImpl() {
        producer.close();
    }

    @Override
    public void writeImpl(Object obj) {
        sendMessage(obj);
    }

    @Override
    public String getOutputModuleName() {
        return "Kafka";
    }

    @Override
    public void update(Map<String, Object> dataUpdate) {
        // Nothing
    }
}
