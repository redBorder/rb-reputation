package net.redborder.malware.modules.data;

import com.kanishka.virustotal.dto.FileScanReport;
import com.kanishka.virustotal.dto.IPAddressReport;
import com.kanishka.virustotal.exception.APIKeyNotFoundException;
import com.kanishka.virustotal.exception.InvalidArguentsException;
import com.kanishka.virustotal.exception.QuotaExceededException;
import com.kanishka.virustotal.exception.UnauthorizedAccessException;
import com.kanishka.virustotalv2.VirusTotalConfig;
import com.kanishka.virustotalv2.VirustotalPublicV2;
import com.kanishka.virustotalv2.VirustotalPublicV2Impl;
import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class VirusTotalDataModule extends AbstractDataModule {

    private static final Logger log = LoggerFactory.getLogger(VirusTotalDataModule.class);

    private VirustotalPublicV2 virusTotalRef;


    private String apiKey = "";

    private String value;

    public VirusTotalDataModule(Config conf) {
        super(conf);

    }

    @Override
    public Object getFullDataImpl() {
        finalResult = new ArrayList<Map<String, Object>>();
        return finalResult;
    }

    @Override
    public Object getIncrementalImpl() {
        finalResult = new ArrayList<Map<String, Object>>();
        return finalResult;
    }

    @Override
    public void prepareQueryImpl(Object parameter) {
        value = parameter.toString();
    }

    @Override
    public void initImpl() {
        log.info("Initializing VirusTotal data module");

        try {
            apiKey = config.get("virustotal.apikey");
            VirusTotalConfig.getConfigInstance().setVirusTotalAPIKey(apiKey);

            if (config.getProperties().contains("virustotal.proxy")) {
                String proxy = config.get("virustotal.proxy");

                String[] host = proxy.split(":");
                virusTotalRef = new VirustotalPublicV2Impl(host[0], Integer.valueOf(host[1]));
            } else {
                virusTotalRef = new VirustotalPublicV2Impl();
            }
        } catch (ConfigException e) {
            e.printStackTrace();
        } catch (APIKeyNotFoundException e) {
            e.printStackTrace();
        }

    }

    @Override
    public void shutdownImpl() {

    }

    @Override
    public String getDataModuleName() {
        return "VirusTotal";
    }

    @Override
    public Map<String, Object> processQueryURL(String URL) {
        FileScanReport urlInformation;
        Map<String, Object> result = new HashMap<>();

        result.put("url", URL);

        try {
            String[] urls = new String[]{URL};
            urlInformation = virusTotalRef.getUrlScanReport(urls, false)[0];
            log.trace("Petition completed with code {}", urlInformation.getResponseCode());

            if (urlInformation.getResponseCode() != 0)
                result.put("score", (urlInformation.getPositives() * 100 / urlInformation.getTotal()));
            else
                result.put("score", -1);

        } catch (IOException e) {
            e.printStackTrace();
        } catch (UnauthorizedAccessException e) {
            e.printStackTrace();
        } catch (QuotaExceededException e) {
            e.printStackTrace();
        } catch (InvalidArguentsException e) {
            e.printStackTrace();
        }

        return result;
    }

    @Override
    public Map<String, Object> processQueryHash(String hash) {

        FileScanReport scanInformation;
        Map<String, Object> result = new HashMap<>();

        result.put("hash", hash);

        try {

            scanInformation = virusTotalRef.getScanReport(hash);
            log.trace("Petition for hash completed with code : {}", scanInformation.getResponseCode());

            if (scanInformation.getResponseCode() != 0)
                result.put("score", (scanInformation.getPositives() * 100 / scanInformation.getTotal()));
            else
                result.put("score", -1);

        } catch (IOException e) {
            e.printStackTrace();
        } catch (UnauthorizedAccessException e) {
            e.printStackTrace();
        } catch (QuotaExceededException e) {
            e.printStackTrace();
        }
        return result;
    }

    @Override
    public Map<String, Object> processQueryIP(String IP) {

        IPAddressReport ipInformation;
        Map<String, Object> result = new HashMap<>();

        result.put("ip", IP);

        try {
            ipInformation = virusTotalRef.getIPAddresReport(IP);
            log.trace("Petition for IP completed with code : {}", ipInformation.getResponseCode());

            result.put("score", -1);
        } catch (InvalidArguentsException e) {
            e.printStackTrace();
        } catch (QuotaExceededException e) {
            e.printStackTrace();
        } catch (UnauthorizedAccessException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        return result;
    }
}
