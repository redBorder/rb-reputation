package net.redborder.malware.modules.data;

import com.kanishka.virustotal.dto.FileScanReport;
import com.kanishka.virustotal.dto.ScanInfo;
import com.kanishka.virustotal.exception.APIKeyNotFoundException;
import com.kanishka.virustotal.exception.QuotaExceededException;
import com.kanishka.virustotal.exception.UnauthorizedAccessException;
import com.kanishka.virustotalv2.VirusTotalConfig;
import com.kanishka.virustotalv2.VirustotalPublicV2;
import com.kanishka.virustotalv2.VirustotalPublicV2Impl;
import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;
import org.codehaus.jackson.map.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class VirusTotalDataModule extends AbstractDataModule {

    private static final Logger log = LoggerFactory.getLogger(VirusTotalDataModule.class);

    private ObjectMapper mapper;
    private VirustotalPublicV2 virusTotalRef;
    private Config config;

    private String apiKey = "";

    public VirusTotalDataModule(Config conf) {
        super(conf);

        try {
            config = new Config(String.format("%s/virustotal.properties", conf.get("malware.controller.datamodules.configpath")));
        } catch (ConfigException e) {
            e.printStackTrace();
        }

    }

    @Override
    public Object getFullDataImpl() {
        this.latch.countDown();
        return null;
    }

    @Override
    public Object getIncrementalImpl() {
        this.latch.countDown();
        log.info("Remaining counts : {}", this.latch.getCount());

        return null;
    }

    @Override
    public Object doQueryImpl() {

        Map<String, Object> result = new HashMap<>();

        try {
            FileScanReport scanInformation = virusTotalRef.getScanReport(queryParam.toString());
            result.put("score",String.format("%f", scanInformation.getPositives()*100/scanInformation.getTotal()));
        } catch (IOException e) {
            e.printStackTrace();
        } catch (UnauthorizedAccessException e) {
            e.printStackTrace();
        } catch (QuotaExceededException e) {
            e.printStackTrace();
        }

        this.latch.countDown();
        log.info("Remaining counts : {}", this.latch.getCount());

        if(result == null)
            log.info("Result not found");

        return result;
    }

    @Override
    public void prepareQueryImpl(Object parameter) {
        queryParam = parameter;
    }

    @Override
    public void initImpl() {
        log.info("Init VirusTotal data module");
        mapper = new ObjectMapper();

        try {
            apiKey = config.get("virustotal.apikey");
        } catch (ConfigException e) {
            e.printStackTrace();
        }

        VirusTotalConfig.getConfigInstance().setVirusTotalAPIKey(apiKey);

        try {
            virusTotalRef = new VirustotalPublicV2Impl();
        } catch (APIKeyNotFoundException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void shutdownImpl() {

    }

    @Override
    public String getDataModuleName() {
        return "VirusTotal";
    }
}
