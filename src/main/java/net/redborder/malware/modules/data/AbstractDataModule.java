package net.redborder.malware.modules.data;

import net.redborder.malware.config.Config;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.concurrent.CountDownLatch;

public abstract class AbstractDataModule implements DataModule{

    private static final Logger log = LoggerFactory.getLogger(AbstractDataModule.class);

    public enum Status{
        NOT_INITIALIZATE, READY, PROCESSING, FINISHED, ERROR
    }

    protected Status status;

    protected Config config;

    protected CountDownLatch latch;

    protected volatile Operation operation;

    protected Object result;
    protected Object queryParam;

    public AbstractDataModule(Config conf){

        this.config = conf;
        status = Status.NOT_INITIALIZATE;

    }

    @Override
    public void selectOperation(Operation operation){
        this.operation = operation;
    }

    @Override
    public void prepareQuery(Object parameter){
        prepareQueryImpl(parameter);
    }

    @Override
    public void init(){
        initImpl();
        status = Status.READY;
    }

    @Override
    public Object getFullData(){

        log.info("Get full data from {}", getDataModuleName());
        result = getFullDataImpl();

        if(latch != null) {
            latch.countDown();
            log.info("{} : Remaining counts {}", getDataModuleName(), latch.getCount());
            latch = null;
        }

        return result;
    }

    @Override
    public Object getIncremental(){
        log.info("Get incremental from {}" , getDataModuleName());
        result = getIncrementalImpl();

        if(latch != null) {
            latch.countDown();
            log.info("{} : Remaining counts {}", getDataModuleName(), latch.getCount());
            latch = null;
        }

        return result;
    }

    @Override
    public Object doQuery(){

        log.info("Doing query for module {}" , getDataModuleName());

        result = doQueryImpl();

        if(latch != null) {
            latch.countDown();
            log.info("{} : Remaining counts {}", getDataModuleName(), latch.getCount());
            latch = null;
        }

        return result;
    }

    @Override
    public void shutdown(){
        log.info("Shutting down {}", getDataModuleName());
        shutdownImpl();
        log.info("Shutdown!");
    }

    @Override
    public void run(){

        status = Status.PROCESSING;

        switch(operation){
            case FULL:
                result = getFullData();
                break;
            case QUERY:
                result = doQuery();
                break;
            case INCREMENTAL:
                result = getIncremental();
                break;
        }

        status = Status.FINISHED;
    }

    @Override
    public Object getOperationResult(){
        return result;
    }

    @Override
    public void addLatch(CountDownLatch latch){
        this.latch = latch;
        log.info("Added latch with {} counts", latch.getCount());
    }

    public abstract Object getFullDataImpl();
    public abstract Object getIncrementalImpl();

    public abstract Object doQueryImpl();
    public abstract void prepareQueryImpl(Object parameter);

    public abstract void initImpl();

    public abstract void shutdownImpl();



}
