package net.redborder.malware.modules.data;

import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class MalwareDataModuleController {

    private Map<String, Object> loadedModules = new HashMap<>();
    private Config conf;

    public MalwareDataModuleController(Config conf) {
        this.conf = conf;
    }

    public void init() {

        List<String> modules = null;

        try {
            modules = conf.getList("malware.controller.datamodules");
        } catch (ConfigException e) {
            e.printStackTrace();
        }

        String packageName = this.getClass().getPackage().getName();

        Pattern pattern = Pattern.compile(String.format("%s\\.[a-zA-Z]+", packageName.replaceAll("\\.", Matcher.quoteReplacement("\\."))));

        for (String module : modules) {

            Matcher match;

            if (module.matches(pattern.pattern()))
                try {
                    loadedModules.put(module, Class.forName(module).newInstance());
                } catch (ClassNotFoundException e) {
                    e.printStackTrace();
                } catch (InstantiationException e) {
                    e.printStackTrace();
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                }

        }

    }

    public void queryTo(String module) {
        System.out.println(((AbstractDataModule)loadedModules.get(module)).getDescription());
    }

    public void queryAll(){
        for( Object obj : loadedModules.values()){
            AbstractDataModule adm = (AbstractDataModule)obj;
            System.out.println(adm.getDescription());
        }

    }

}
