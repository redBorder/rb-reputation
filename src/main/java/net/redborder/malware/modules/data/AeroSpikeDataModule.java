package net.redborder.malware.modules.data;

import com.aerospike.client.Host;
import com.aerospike.client.Key;
import com.aerospike.client.Record;
import com.aerospike.client.async.AsyncClient;
import com.aerospike.client.async.AsyncClientPolicy;
import com.aerospike.client.policy.Policy;
import com.aerospike.client.policy.QueryPolicy;
import com.aerospike.client.policy.RecordExistsAction;
import com.aerospike.client.policy.WritePolicy;
import com.aerospike.client.query.RecordSet;
import com.aerospike.client.query.Statement;
import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AeroSpikeDataModule extends AbstractDataModule {

    private static final Logger log = LoggerFactory.getLogger(AeroSpikeDataModule.class);

    private AsyncClient aerospikeClient;
    private List<String> hosts;
    Integer timeout;
    WritePolicy writePolicy;
    private String collection = null;
    private String namespace = null;

    public AeroSpikeDataModule(Config conf) throws ConfigException {
        super(conf);

        try {
            config = new Config(String.format("%s/aerospike.properties", conf.get("malware.controller.datamodules.configpath")));
        } catch (ConfigException e) {
            e.printStackTrace();
        }

        this.hosts = config.getList("aerospike.servers");
        this.timeout = config.getInt("aerospike.clientTimeout", 500);
        this.collection = config.get("aerospike.collection", "rb_malware");
        this.namespace = config.get("aerospike.namespace", "malware");
        this.writePolicy = new WritePolicy();
        this.writePolicy.recordExistsAction = RecordExistsAction.UPDATE;
    }

    @Override
    public Object getFullDataImpl() {

        log.info("Getting full data from AeroSpike client");

        ArrayList<Map<String, Object>> result = new ArrayList<>();

        Statement stmt = new Statement();

        stmt.setNamespace(namespace);
        stmt.setSetName(collection);

        RecordSet records = aerospikeClient.query(new QueryPolicy(), stmt);

        while(records != null && records.next()){
            result.add(records.getRecord().bins);
        }

        if (records == null) {
            return new ArrayList<Map<String, Object>>();
        } else {
            return result;
        }
    }

    @Override
    public Object getIncrementalImpl() {
        return new ArrayList<Map<String, Object>>();
    }

    @Override
    public void prepareQueryImpl(Object parameter) {
        queryParam = parameter.toString();
    }

    @Override
    public Object doQueryImpl() {

        log.info("Getting data for user doQuery from AeroSpike client");

        Record record = aerospikeClient.get(new Policy(),new Key(namespace, collection, String.valueOf(queryParam)));

        if (record == null) {
            return new ArrayList<Map<String,Object>>();
        } else {
            return record.bins;
        }
    }

    @Override
    public void initImpl() {
        log.info("Init AeroSpike Data Module");

        List<Host> servers = new ArrayList<>();

        for (String host : hosts) {
            String[] sp = host.split(":");
            servers.add(new Host(sp[0], Integer.valueOf(sp[1])));
        }

        AsyncClientPolicy cPolicy = new AsyncClientPolicy();
        cPolicy.timeout = timeout;

        aerospikeClient = new AsyncClient(cPolicy, servers.toArray(new Host[servers.size()]));
        log.info(String.format("AeroSpike connected to %s", servers));
    }

    @Override
    public void shutdownImpl() {
        log.info("Shutdown AeroSpike data module ...");
        if(aerospikeClient.isConnected())
            aerospikeClient.close();
        log.info("Done!");
    }

    @Override
    public String getDataModuleName() {
        return "AeroSpike";
    }

}
