package net.redborder.malware.modules.data;

import com.aerospike.client.Host;
import com.aerospike.client.Key;
import com.aerospike.client.Record;
import com.aerospike.client.async.AsyncClient;
import com.aerospike.client.async.AsyncClientPolicy;
import com.aerospike.client.policy.Policy;
import com.aerospike.client.policy.QueryPolicy;
import com.aerospike.client.policy.RecordExistsAction;
import com.aerospike.client.policy.WritePolicy;
import com.aerospike.client.query.RecordSet;
import com.aerospike.client.query.Statement;
import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;
import org.omg.CORBA.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.Object;
import java.util.*;

public class AeroSpikeDataModule extends AbstractDataModule {

    private static final Logger log = LoggerFactory.getLogger(AeroSpikeDataModule.class);

    private AsyncClient aerospikeClient;
    private List<String> hosts;
    Integer timeout;
    WritePolicy writePolicy;
    private String collection = null;
    private String namespace = null;
    private String value;

    private ArrayList<Map<String, Object>> lastIncremental = new ArrayList<>();

    public AeroSpikeDataModule(Config conf) throws ConfigException {
        super(conf);

        this.hosts = config.getList("aerospike.servers");
        this.timeout = config.getInt("aerospike.clientTimeout", 500);
        this.collection = config.get("aerospike.collection", "rb_malware");
        this.namespace = config.get("aerospike.namespace", "malware");
        this.writePolicy = new WritePolicy();
        this.writePolicy.recordExistsAction = RecordExistsAction.UPDATE;
    }

    @Override
    public Object getFullDataImpl() {

        log.info("Getting full data from AeroSpike client");

        ArrayList<Map<String, Object>> result = new ArrayList<>();

        Statement stmt = new Statement();

        stmt.setNamespace(namespace);

        if(fullDataType.compareTo(FullDataType.TOTAL) != 0){
            log.info("Getting {} full data", fullDataType.value.toUpperCase());
            stmt.setSetName(String.format("%sScores", fullDataType.value));

            RecordSet records = aerospikeClient.query(new QueryPolicy(), stmt);

            Set<String> retainKeys = new HashSet<>();
            retainKeys.add("score");
            retainKeys.add(fullDataType.value);

            while(records != null && records.next()){
                Map<String, Object> record = records.getRecord().bins;
                record.keySet().retainAll(retainKeys);
                result.add(record);
            }

            if (records == null) {
                this.finalResult = new ArrayList<Map<String, Object>>();
                return this.finalResult;
            } else {
                this.finalResult = result;
                return this.finalResult;
            }

        }else{
            log.info("Getting TOTAL full data");

            for(FullDataType value : FullDataType.values()){

                if(value.compareTo(FullDataType.TOTAL) != 0){

                    log.info("Getting total for : {}", value.value);

                    stmt.setSetName(String.format("%sScores", value.value));

                    RecordSet records = aerospikeClient.query(new QueryPolicy(), stmt);

                    Set<String> retainKeys = new HashSet<>();
                    retainKeys.add("score");
                    retainKeys.add(value.value);

                    while(records != null && records.next()){
                        Map<String, Object> record = records.getRecord().bins;
                        record.keySet().retainAll(retainKeys);
                        result.add(record);
                    }
                }
            }

            log.info("Getted full data!");

            finalResult = result;

            return finalResult;
        }

    }

    @Override
    public Object getIncrementalImpl() {

        ArrayList<Map<String, Object>> fullList = (ArrayList<Map<String, Object>>)getFullDataImpl();
        ArrayList<Map<String, Object>> incrementalList = (ArrayList<Map<String, Object>>)fullList.clone();
        incrementalList.removeAll(lastIncremental);
        lastIncremental = fullList;
        finalResult = incrementalList;

        return finalResult;
    }

    @Override
    public void prepareQueryImpl(Object parameter) {
        value = parameter.toString();
    }

    @Override
    public void initImpl() {
        log.info("Init AeroSpike Data Module");

        List<Host> servers = new ArrayList<>();

        for (String host : hosts) {
            String[] sp = host.split(":");
            servers.add(new Host(sp[0], Integer.valueOf(sp[1])));
        }

        AsyncClientPolicy cPolicy = new AsyncClientPolicy();
        cPolicy.timeout = timeout;

        aerospikeClient = new AsyncClient(cPolicy, servers.toArray(new Host[servers.size()]));
        log.info(String.format("AeroSpike connected to %s", servers));
    }

    @Override
    public void shutdownImpl() {
        log.info("Shutdown AeroSpike data module ...");
        if(aerospikeClient.isConnected())
            aerospikeClient.close();
        log.info("Done!");
    }

    @Override
    public String getDataModuleName() {
        return "AeroSpike";
    }

    @Override
    public Map<String, Object> processQueryURL(String URL) {

        Map<String, Object> result = new HashMap<>();

        log.info("Getting data from AeroSpike client");

        Record record = aerospikeClient.get(new Policy(),new Key(namespace, "urlScores", URL));

        if (record == null) {
            result.put("record", new HashMap<String, Object>());
//            finalResult = new ArrayList<Map<String,Object>>();
            return result;
        } else {
            result.put("record", record.bins);
            return result;
        }
    }

    @Override
    public Map<String, Object> processQueryHash(String hash) {

        Map<String, Object> result = new HashMap<>();

        log.info("Getting data from AeroSpike client");

        Record record = aerospikeClient.get(new Policy(),new Key(namespace, "hashScores", hash));

        if (record == null) {
            result.put("record", new HashMap<String, Object>());
            return result;
        } else {
            result.put("record", record.bins);
            return result;
        }
    }

    @Override
    public Map<String, Object> processQueryIP(String IP) {

        Map<String, Object> result = new HashMap<>();

        log.info("Getting data from AeroSpike client");

        Record record = aerospikeClient.get(new Policy(),new Key(namespace, collection, IP));

        if (record == null) {
            result.put("record", new HashMap<String, Object>());
            return result;
        } else {
            result.put("record", record.bins);
            return result;
        }
    }

}
