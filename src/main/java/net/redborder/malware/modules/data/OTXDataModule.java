package net.redborder.malware.modules.data;

import org.json.JSONObject;
import net.redborder.malware.config.Config;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class OTXDataModule extends AbstractDataModule {

	private static final Logger log = LoggerFactory.getLogger(OTXDataModule.class);
	
	public OTXDataModule(Config conf) {
        super(conf);

    }
	
	/**
     * Check whether input ip is in the range of private networks 
     * 
     * <li> Class A: 10.0.0.0 ------- 10.255.255.255 </li>
     * <li> Class B: 172.16.0.0 ---- 172.31.255.255 </li>
     * <li> Class C: 192.168.0.0 --- 192.168.255.255 </li>
     *
     * @param ip String with the ip to check.
     * @return true if the ip is private. Otherwise returns false.
     */
    private static boolean isPrivateNetwork(String ip) {
    	Integer sub_ip = Integer.valueOf(ip.substring(0, ip.indexOf(".")));
    	boolean isPrivate = false;
		switch (sub_ip) {
			case 10:
				isPrivate = true;
				break;
			case 172:
				sub_ip = Integer.valueOf(ip.substring(4, ip.indexOf(".",4)));
				if (sub_ip >= 16 && sub_ip < 32)
					isPrivate = true;
				break;
			case 192:
				sub_ip = Integer.valueOf(ip.substring(4, ip.indexOf(".",4)));
				if (sub_ip.equals(168))
					isPrivate = true;
				break;	
		}
		return isPrivate;
    }

	/**
	 * getPulses(String ip) method returns an integer with the number of "pulses" in AlienVault. 
	 * "Pulses" are collections of Indicators of Compromise, IPs, urls, and file hashes related 
	 * to potentially malicious activity, contributed by the AlienVault Labs research team as 
	 * well as other members of the OTX community. 
	 * @throws IOException 
	 */
	public static int getPulses(String ip) {
		
		if (isPrivateNetwork(ip)) {
			log.info("Private IP");
			return 0;
		}
		
		String sURL = "https://otx.alienvault.com/api/v1/indicators/IPv4/"+ ip +"/general";
		
		int pulses = -1;
		System.setProperty("https.protocols", "");
		try { 
			
			URL url = new URL(sURL);
			
			BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
			
			JSONObject json = new JSONObject(br.readLine());
			 
			JSONObject json2 = ((JSONObject) json.get("pulse_info"));
			pulses = Integer.parseInt(json2.get("count").toString());
		} 
		catch (java.io.IOException ex) {}
		catch (NumberFormatException ex){}

		return pulses;
	 }

	@Override
    public Object getFullDataImpl() {
        finalResult = new ArrayList<Map<String, Object>>();
        return finalResult;
    }

    @Override
    public Object getIncrementalImpl() {
        finalResult = new ArrayList<Map<String, Object>>();
        return finalResult;
    }

    @Override
    public void prepareQueryImpl(Object parameter) {
        parameter.toString();
    }

    @Override
    public void initImpl() {
        log.trace("Initializing OTX AlienVault data module");
    }

    @Override
    public void shutdownImpl() {

    }

    @Override
    public void reloadImpl() {
    }

    @Override
    public String getDataModuleName() {
        return "OTX";
    }

    @Override
    public Map<String, Object> processQueryURL(String URL) {

        Map<String, Object> result = new HashMap<>();

        result.put("url", URL);

        result.put("score", -1);

        return result;
    }

    @Override
    public Map<String, Object> processQueryHash(String hash) {

        Map<String, Object> result = new HashMap<>();

        result.put("hash", hash);

        result.put("score", -1);

        return result;
    }

    @Override
    public Map<String, Object> processQueryIP(String IP) {

        Map<String, Object> result = new HashMap<>();

        result.put("ip", IP);

    	int score;
    	
		score = getPulses(IP);
		
    	log.info("Score OTX AlienVault: " + score);

        result.put("score", score);
     
        return result;
    }
}