package net.redborder.malware.modules.data;

import org.json.JSONObject;
import net.redborder.malware.config.Config;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class OTXDataModule extends AbstractDataModule {

	private static final Logger log = LoggerFactory.getLogger(OTXDataModule.class);
	
	public OTXDataModule(Config conf) {
        super(conf);

    }

	/**
	 * getPulses(String ip) method returns an integer with the number of "pulses" in AlienVault. 
	 * "Pulses" are collections of Indicators of Compromise, IPs, urls, and file hashes related 
	 * to potentially malicious activity, contributed by the AlienVault Labs research team as 
	 * well as other members of the OTX community. 
	 */
	public static int getPulses(String ip) throws IOException {
		String sURL = "https://otx.alienvault.com/api/v1/indicators/IPv4/"+ ip +"/general";
		URL url = new URL(sURL);
		int pulses = -1;
		try { 
			BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
			
			JSONObject json = new JSONObject(br.readLine());
			 
			JSONObject json2 = ((JSONObject) json.get("pulse_info"));
			pulses = Integer.parseInt(json2.get("count").toString());    
		} 
		catch (java.io.IOException ex) {}
		catch (NumberFormatException ex){}

		return pulses;
	 }

	@Override
    public Object getFullDataImpl() {
        finalResult = new ArrayList<Map<String, Object>>();
        return finalResult;
    }

    @Override
    public Object getIncrementalImpl() {
        finalResult = new ArrayList<Map<String, Object>>();
        return finalResult;
    }

    @Override
    public void prepareQueryImpl(Object parameter) {
        parameter.toString();
    }

    @Override
    public void initImpl() {
        log.trace("Initializing OTX AlienVault data module");

    }

    @Override
    public void shutdownImpl() {

    }

    @Override
    public void reloadImpl() {
    }

    @Override
    public String getDataModuleName() {
        return "OTX";
    }

    @Override
    public Map<String, Object> processQueryURL(String URL) {

        Map<String, Object> result = new HashMap<>();

        result.put("url", URL);

        result.put("score", -1);

        return result;
    }

    @Override
    public Map<String, Object> processQueryHash(String hash) {

        Map<String, Object> result = new HashMap<>();

        result.put("hash", hash);

        result.put("score", -1);

        return result;
    }

    @Override
    public Map<String, Object> processQueryIP(String IP) {

        Map<String, Object> result = new HashMap<>();

        result.put("ip", IP);

        try {
        	int score = getPulses(IP);
            log.trace("Petition for IP completed with code : {}", 200);

            result.put("score", score);
        } catch (IOException e) {
            log.error(e.getLocalizedMessage());
            result.put("score", -1);
        }

        return result;
    }
}