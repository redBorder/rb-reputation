package net.redborder.malware.modules.data;

import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;
import org.codehaus.jackson.map.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetaScanDataModule extends AbstractDataModule {

    private static final Logger log = LoggerFactory.getLogger(MetaScanDataModule.class);

    private String apiKey;
    private final String lookupURL = "http://hashlookup.metascan-online.com/v2/hash/%s";
    private ObjectMapper mapper;

    public MetaScanDataModule(Config conf) {
        super(conf);

        try {
            config = new Config(String.format("%s/metascan.properties", conf.get("malware.controller.datamodules.configpath")));
        } catch (ConfigException e) {
            e.printStackTrace();
        }

    }

    @Override
    public Object getFullDataImpl() {
        return null;
    }

    @Override
    public Object getIncrementalImpl() {
        return null;
    }

    @Override
    public Object doQueryImpl() {

        try {
            URL objLookup = new URL(String.format(lookupURL, queryParam.toString()));
            HttpURLConnection conn = (HttpURLConnection) objLookup.openConnection();
            conn.setRequestMethod("GET");
            conn.setRequestProperty("apikey", apiKey);

            int responseCode = conn.getResponseCode();

            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuffer response = new StringBuffer();
            String inputLine;

            while((inputLine = bufferedReader.readLine()) != null){
                response.append(inputLine);
            }

            bufferedReader.close();

            switch(responseCode){
                case 400:
                    log.info("CODE 400 Bad Request - Unsupported HTTP method or invalid HTTP request (e.g., empty body)");
                    break;
                case 401:
                    log.info("CODE 401 Invalid API key - Either missing API key or invalid API is passed.");
                    break;
                case 403:
                    log.info("CODE 403 Signature lookup limit reached, try again later - The hourly hash lookup limit has been reached for this API key.");
                    break;
                case 200:
                    log.info("CODE 200 Petition completed");

                    if(!response.toString().contains("Not Found")){
                        Map<String, Object> fileJson = mapper.readValue(response.toString(), Map.class);

                        Map<String, Object> scans = (Map<String, Object>) fileJson.get("scan_details");

                        Long detected = 0L;
                        Long total = scans.size() == 0 ? 1L : scans.size();

                        for (String engineName : scans.keySet()) {

                            Map<String, Object> scan = (Map<String, Object>) scans.get(engineName);
                            String result = scan.get("threat_found").equals("") ? "N/A" : (String) scan.get("threat_found");

                            if(!result.equals("N/A")){
                                detected++;
                            }

                        }
                        return detected*100/total;
                    }else{
                        log.info("Result not found");
                    }

                    break;
            }

        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        return null;
    }

    @Override
    public void prepareQueryImpl(Object parameter) {
        queryParam = parameter;
    }

    @Override
    public void initImpl() {

        mapper = new ObjectMapper();

        try {
            apiKey = config.get("metascan.apikey");
        } catch (ConfigException e) {
            e.printStackTrace();
        }

    }

    @Override
    public void shutdownImpl() {
    }

    @Override
    public String getDataModuleName() {
        return "MetaScan";
    }
}
