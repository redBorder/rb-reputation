package net.redborder.malware.modules.data;

import com.fasterxml.jackson.databind.ObjectMapper;
import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class BrightCloudDataModule extends AbstractDataModule {

    private static final Logger log = LoggerFactory.getLogger(BrightCloudDataModule.class);

    private String value;
    private ObjectMapper mapper;
    private String server;

    public BrightCloudDataModule(Config conf) {
        super(conf);
    }

    @Override
    public Object getFullDataImpl() {

        finalResult = new ArrayList<Map<String, Object>>();
        return finalResult;
    }

    @Override
    public Object getIncrementalImpl() {

        finalResult = new ArrayList<Map<String, Object>>();
        return finalResult;

    }

    @Override
    public void prepareQueryImpl(Object parameter) {
        value = parameter.toString();
    }

    @Override
    public void initImpl() {
        log.info("Initializing BrightCloud data module");
        mapper = new ObjectMapper();
    }

    @Override
    public void shutdownImpl() {

    }

    @Override
    public void reloadImpl() {

        try{
            server = config.get("brightcloud.server");
        } catch(ConfigException e){
            e.printStackTrace();
        }
    }

    @Override
    public String getDataModuleName() {
        return "BrightCloud";
    }

    @Override
    public Map<String, Object> processQueryURL(String URL) {

        Map<String, Object> result = new HashMap<>();
        Map<String, Object> responseMap = new HashMap<>();

        CloseableHttpClient client = HttpClients.createDefault();
        HttpGet getRequest = new HttpGet(String.format("http://%s/url_info/%s",server, URL));

        try {
            CloseableHttpResponse response = client.execute(getRequest);

            HttpEntity entity = response.getEntity();

            if (response.getStatusLine().getStatusCode() == 200)
                if (entity != null) {
                    BufferedReader br = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));

                    String output;

                    while ((output = br.readLine()) != null){
                        responseMap = mapper.readValue(output, Map.class);


                    }

                    br.close();

                }

            client.close();
            response.close();

        } catch (IOException e) {
            log.error(e.getMessage());
        }

        result.put("url", URL);

        int score = -1;

        Matcher m = Pattern.compile("(?:http:\\/\\/)?(?:www\\.)?(?<url>.+)").matcher(URL);

        if (m.matches()){
            score = 100 - Integer.parseInt(((Map<String, Object>)responseMap.get(m.group("url"))).get("reputation").toString());
        }

        result.put("score", score);
        finalResult = result;

        return result;
    }


    @Override
    public Map<String, Object> processQueryHash(String hash) {

        Map<String, Object> result = new HashMap<>();
        Map<String, Object> responseMap = new HashMap<>();

        result.put("hash", hash);

        CloseableHttpClient client = HttpClients.createDefault();
        HttpGet getRequest = new HttpGet(String.format("http://%s/file_md5/%s",server, hash));

        try {

            CloseableHttpResponse response = client.execute(getRequest);

            HttpEntity entity = response.getEntity();

            if (response.getStatusLine().getStatusCode() == 200)


                if (entity != null) {
                    BufferedReader br = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));

                    String output;

                    while ((output = br.readLine()) != null){
                        responseMap = mapper.readValue(output, Map.class);

                    }

                    br.close();

                }

            client.close();
            response.close();

        } catch (IOException e) {
            log.error(e.getMessage());
        }

        String determination = ((Map<String, Object>)responseMap.get(hash)).get("determination").toString();

        int score = -1;

        if (determination.contains("bad")) {
            score = 100;
        }else if (determination.contains("good")) {
            score = 0;
        }

        result.put("score", score);

        finalResult = result;
        return result;

    }

    @Override
    public Map<String, Object> processQueryIP(String IP)
    {
        Map<String, Object> result = new HashMap<>();
        Map<String, Object> responseMap = new HashMap<>();

        result.put("IP", IP);

        CloseableHttpClient client = HttpClients.createDefault();
        HttpGet getRequest = new HttpGet(String.format("http://%s/ip_reputation/%s",server, IP));

        try {
            CloseableHttpResponse response = client.execute(getRequest);

            HttpEntity entity = response.getEntity();

            if (response.getStatusLine().getStatusCode() == 200)
                if (entity != null) {
                    BufferedReader br = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));

                    String output;

                    while ((output = br.readLine()) != null){
                        responseMap = mapper.readValue(output, Map.class);

                    }

                    br.close();

                }

            client.close();
            response.close();

        } catch (IOException e) {
            log.error(e.getMessage());
        }


        String status = ((Map<String, Object>)responseMap.get(IP)).get("ip_status").toString();

        int score = -1;

        if (status.contains("ok")) {
            score = 0;
        } else if (status.contains("threat")) {
            score = 100;
        }

        result.put("score", score);

        finalResult = result;

        return result;
    }
}
