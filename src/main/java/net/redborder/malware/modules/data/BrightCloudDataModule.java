package net.redborder.malware.modules.data;

import com.fasterxml.jackson.databind.ObjectMapper;
import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;
import net.redborder.malware.utils.HTTP;

import java.util.ArrayList;
import java.util.Map;

public class BrightCloudDataModule extends AbstractDataModule {

    private String value;
    private ObjectMapper mapper;
    private HTTP clientHttp;
    private String server;

    public BrightCloudDataModule(Config conf) {
        super(conf);
    }

    @Override
    public Object getFullDataImpl() {

        finalResult = new ArrayList<Map<String, Object>>();
        return finalResult;
    }

    @Override
    public Object getIncrementalImpl() {

        finalResult = new ArrayList<Map<String, Object>>();
        return finalResult;

    }

    @Override
    public void prepareQueryImpl(Object parameter) {
        value = parameter.toString();
    }

    @Override
    public void initImpl() {
        mapper = new ObjectMapper();
        clientHttp = new HTTP();
    }

    @Override
    public void shutdownImpl() {

    }

    @Override
    public void reloadImpl() {

        try{
            server = config.get("brightcloud.server");
        } catch(ConfigException e){
            e.printStackTrace();
        }

    }

    @Override
    public String getDataModuleName() {
        return "BrightCloud";
    }

    @Override
    public Map<String, Object> processQueryURL(String URL) {
        Map<String, Object> result = (Map<String, Object>) clientHttp.GET(String.format("%s/url/reputation/%s",server, URL));
        finalResult = result;
        return result;
    }

    @Override
    public Map<String, Object> processQueryHash(String hash) {

        Map<String, Object> result = (Map<String, Object>) clientHttp.GET(String.format("%s/md5/%s",server, hash));
        finalResult = result;
        return result;

    }

    @Override
    public Map<String, Object> processQueryIP(String IP)
    {
        Map<String, Object> result = (Map<String, Object>) clientHttp.GET(String.format("%s/ip/reputation/%s",server, IP));
        finalResult = result;
        return result;
    }
}
