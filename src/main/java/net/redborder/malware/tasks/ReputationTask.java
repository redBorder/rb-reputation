package net.redborder.malware.tasks;

import net.redborder.malware.MalwareREST;
import net.redborder.malware.config.Config;
import net.redborder.malware.controllers.MalwareDataModuleController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import spark.Session;

import java.util.concurrent.*;

public class ReputationTask extends AbstractTask {

    private static final Logger log = LoggerFactory.getLogger(ReputationTask.class);

    // Data Module
    private MalwareDataModuleController dataModuleController;

    // Queues
    private PriorityBlockingQueue<Object> priorityBlockingQueue;

    public ReputationTask(Config confDataModule, Config confOutputModule, PriorityBlockingQueue<Object> priorityBlockingQueue) {

        dataModuleController = new MalwareDataModuleController(confDataModule);

        this.priorityBlockingQueue = priorityBlockingQueue;

        dataModuleController.init();
    }

    @Override
    protected Object doTaskImpl(TaskMonitor monitor) {

        try {

            Session session;

            while ((session = (Session)this.priorityBlockingQueue.take()) != null) {
                log.info("Getting new petition ...");

                CountDownLatch latch = session.attribute("latch");

                MalwareREST.OPERATION operation = session.attribute(MalwareREST.PARAM_API_OPERATION);
                MalwareREST.PROCESS process = session.attribute(MalwareREST.PARAM_QUERY_PROCESS);
                MalwareREST.RESPONSE response = session.attribute(MalwareREST.PARAM_QUERY_RESPONSE);


                if(process != null)
                    dataModuleController.setProcess(process);
                else
                    dataModuleController.setProcess(MalwareREST.PROCESS.AGILE);

                log.info("Set process to : {}", process);

                if(response != null)
                    dataModuleController.setResponse(response);
                else
                    dataModuleController.setResponse(MalwareREST.RESPONSE.SIMPLE);

                log.info("Set response to : {}", response);

                switch (operation){
                    case QUERY:
                        log.info("Doing query ... ");
                        Object query = session.attribute("query");
                        session.attribute("result", dataModuleController.doQuery(query));
                        break;
                    case TOTAL:
                        log.info("Doing total ... ");
                        session.attribute("result", dataModuleController.getFullData());
                        break;
                    case INCREMENTAL:
                        //None
                        break;
                }

                log.info("Petition completed!");

                latch.countDown();

            }

        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        return null;
    }

    @Override
    protected void shutdownImpl() {
        log.info("Shutting down reputation");
        dataModuleController.shutdown();
        log.info("Shutdown!");
    }

    @Override
    public Class<?> getTaskResultType() {
        return null;
    }

}
