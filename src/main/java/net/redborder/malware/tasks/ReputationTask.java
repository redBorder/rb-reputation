package net.redborder.malware.tasks;

import net.redborder.malware.config.Config;
import net.redborder.malware.controllers.MalwareDataModuleController;
import net.redborder.malware.controllers.MalwareOutputModuleController;
import spark.Session;

import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.*;

public class ReputationTask extends AbstractTask {

    // Data Module
    private MalwareDataModuleController dataModuleController;

    // Output Module
    private MalwareOutputModuleController outputController;

    // Queues
    private PriorityBlockingQueue<Object> priorityBlockingQueue;

    public ReputationTask(Config confDataModule, Config confOutputModule, PriorityBlockingQueue<Object> priorityBlockingQueue) {

        dataModuleController = new MalwareDataModuleController(confDataModule);
        outputController = new MalwareOutputModuleController(confOutputModule);

        this.priorityBlockingQueue = priorityBlockingQueue;

        dataModuleController.init();
        outputController.init();

    }

    @Override
    protected Object doTaskImpl(TaskMonitor monitor) {

        try {

            Session session;

            while ((session = (Session)this.priorityBlockingQueue.take()) != null) {

                CountDownLatch latch = session.attribute("latch");
                String operation = session.attribute("operation");

                if(operation.matches("query")){
                    Object query = session.attribute("query");
                    session.attribute("result", dataModuleController.doQuery(query));
                }else if(operation.matches("total")){
                    session.attribute("result", dataModuleController.getFullData());
                }

                latch.countDown();

            }

        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        return null;
    }

    @Override
    protected void shutdownImpl() {

    }

    @Override
    public Class<?> getTaskResultType() {
        return null;
    }

}
