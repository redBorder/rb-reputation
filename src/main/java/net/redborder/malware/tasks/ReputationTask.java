package net.redborder.malware.tasks;

import net.redborder.malware.config.Config;
import net.redborder.malware.controllers.MalwareDataModuleController;
import net.redborder.malware.controllers.MalwareOutputModuleController;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;

public class ReputationTask extends AbstractTask{

    // Data Module
    private MalwareDataModuleController dataModuleController;

    // Output Module
    private MalwareOutputModuleController outputController;

    // Queues
    private PriorityBlockingQueue<Object> priorityBlockingQueue;
    private LinkedBlockingQueue<Object> resultBlokingQueue;

    public ReputationTask(Config confDataModule, Config confOutputModule, PriorityBlockingQueue<Object> priorityBlockingQueue, LinkedBlockingQueue<Object> resultBlokingQueue) {

        dataModuleController = new MalwareDataModuleController(confDataModule);
        outputController = new MalwareOutputModuleController(confOutputModule);

        this.priorityBlockingQueue = priorityBlockingQueue;
        this.resultBlokingQueue = resultBlokingQueue;

        dataModuleController.init();
        outputController.init();

    }

    @Override
    protected Object doTaskImpl(TaskMonitor monitor) {

        try {

            Object petition = this.priorityBlockingQueue.take();

            this.resultBlokingQueue.put(new Object());

        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        return null;
    }

    @Override
    protected void shutdownImpl() {

    }

    @Override
    public Class<?> getTaskResultType() {
        return null;
    }

}
