package net.redborder.malware.tasks;

import kafka.consumer.Consumer;
import kafka.consumer.ConsumerConfig;
import kafka.consumer.ConsumerIterator;
import kafka.consumer.KafkaStream;
import kafka.javaapi.consumer.ConsumerConnector;
import net.redborder.malware.config.Config;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.BlockingQueue;

public class Kafka2Queue extends AbstractTask {

    private ConsumerConnector consumer;
    private BlockingQueue<Object> queue;
    private ObjectMapper _mapper;
    private KafkaStream m_stream;
    private Config config;

    private Kafka2Queue(Config config, BlockingQueue<Object> queue){
        this.queue = queue;
        this.config = config;

        consumer = Consumer.createJavaConsumerConnector(new ConsumerConfig(config.getProperties()));

        this._mapper = new ObjectMapper();
    }

    private void consumerFromTopic(String topic){
        Map<String, Integer> topicCountMap = new HashMap<>();
        topicCountMap.put(topic, 1);

        Map<String, List<KafkaStream<byte[], byte[]>>> consumerMap = consumer.createMessageStreams(topicCountMap);

        List<KafkaStream<byte[], byte[]>> streams = consumerMap.get(topic);

        m_stream = streams.get(0);
    }

    @Override
    protected Object doTaskImpl(TaskMonitor monitor) {

        consumerFromTopic("topic");

        ConsumerIterator<byte[], byte[]> it = m_stream.iterator();

        while(it.hasNext()){
            try{
                Map<String, Object> mapJson = _mapper.readValue(it.next().message(), new TypeReference<HashMap<String, Object>>(){});
                mapJson.remove("cuckoo_before");
                mapJson.put("action","create");

                queue.put(mapJson);
            }catch(Exception e){

            }
        }

        return null;
    }

    @Override
    protected void shutdownImpl() {
        consumer.shutdown();
    }

    @Override
    public Class<?> getTaskResultType() {
        return null;
    }
}
