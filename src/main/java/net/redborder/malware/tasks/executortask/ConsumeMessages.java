package net.redborder.malware.tasks.executortask;

import kafka.consumer.ConsumerIterator;
import kafka.consumer.KafkaStream;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class ConsumeMessages implements Runnable {

    private static ArrayList<Map<String, Object>> rev = new ArrayList<>();

    private ObjectMapper _mapper;
    private KafkaStream m_stream;

    public ConsumeMessages(KafkaStream a_stream) {
        _mapper = new ObjectMapper();
        m_stream = a_stream;
    }

    @Override
    public void run() {

        ConsumerIterator<byte[], byte[]> it = m_stream.iterator();

        while (it.hasNext()) {
            try {
                Map<String, Object> mapJson = _mapper.readValue(it.next().message(), new TypeReference<HashMap<String, Object>>() {});

                mapJson.remove("cuckoo_before");
                mapJson.put("action", "create");

                rev.add(mapJson);
                System.out.println(_mapper.writeValueAsString(mapJson));
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public static ArrayList<Map<String, Object>> getRevision() {
        return rev;

    }

    public static void newRevision() {
        rev.clear();
    }

}
