package net.redborder.malware;

import net.redborder.malware.config.Config;
import net.redborder.malware.controllers.MalwareController;
import net.redborder.malware.controllers.MalwareTaskController;
import net.redborder.malware.modules.data.OTXDataModule;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import spark.Session;
import sun.misc.Signal;
import sun.misc.SignalHandler;

import java.util.Comparator;
import java.util.concurrent.PriorityBlockingQueue;

public class MalwareService {

    private static PriorityBlockingQueue<Object> priorityQueue = new PriorityBlockingQueue<>(5000, new Comparator<Object>() {

        @Override
        public int compare(Object o1, Object o2) {

            Session session1 = (Session) o1;
            Session session2 = (Session) o2;

            return Integer.compare((int) session2.attribute("priority"), (int) session1.attribute("priority"));
        }
    });

    private static final Logger log = LoggerFactory.getLogger(MalwareService.class);

    public static void main(String[] args) {

        // Load configuration
        final Config conf = new Config("/etc/rb-reputation/config.properties");

        IncrementalList.init(conf);

        // Init API REST
        MalwareREST.init(conf, priorityQueue);

        MalwareController.init(conf);
        MalwareTaskController.init(conf, priorityQueue);
        LocalCache.init(conf);

        LocalCache.reset();

        // Init Malware Controller

        // Init Workers in Malware Task Controller
        MalwareTaskController.reloadWorkers();


        Runtime.getRuntime().addShutdownHook(new Thread() {

            public void run() {

                log.info("Shutting down service ...");
                MalwareController.shutdown();
                MalwareTaskController.shutdownController();
                log.info("Shutdown!");

            }
        });

        Signal.handle(new Signal("HUP"), new SignalHandler() {
            public void handle(Signal signal) {
                log.info("Reload received...");

                conf.reload();
                MalwareController.reload();
                MalwareTaskController.reloadWorkers();

            }
        });

    }
}
