package net.redborder.malware;

import com.google.common.cache.CacheBuilder;
import com.google.common.cache.CacheLoader;
import com.google.common.cache.LoadingCache;
import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;
import net.redborder.malware.managers.AeroSpikeManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class LocalCache {

    private static final Logger log = LoggerFactory.getLogger(LocalCache.class);

    private static AeroSpikeManager aeroSpikeManager;

    private static String collection = "";
    private static String namespace = "";

    private static LoadingCache<String, Map<String, Object>> cache;

    private static Config conf;

    public static void init(Config config) {

        long ttl = config.getTime("malware.cache.ttl", "2M");

        conf = new Config("/etc/rb-reputation/config.properties");
        namespace = "malware";

        try {
            aeroSpikeManager = new AeroSpikeManager(conf);
        } catch (ConfigException e) {
            e.printStackTrace();
        }

        cache = CacheBuilder.newBuilder()
                .expireAfterAccess(ttl, TimeUnit.MILLISECONDS)
                .maximumSize(Integer.MAX_VALUE)
                .weakKeys()
                .recordStats()
                .build(new CacheLoader<String, Map<String, Object>>() {

                    @Override
                    public Map<String, Object> load(String key) throws Exception {

                        Map<String, Object> result = aeroSpikeManager.get(namespace, collection, key);

                        if (result != null && result.containsKey("g_rt_score"))
                            return result;
                        else {

                            result = new HashMap<>();

                            Pattern pattern = Pattern.compile("(?<param>hash|ip|url)(?:Scores)");
                            Matcher matcher = pattern.matcher(collection);

                            if (matcher.matches()) {
                                result.put(matcher.group("param"), key);
                                result.put("score", -1);
                            }

                            return result;
                        }

                    }

                });
    }

    public static Map<String, Object> read(String param, String key) {

        log.info("Reading {} with value {}", param, key);
        Map<String, Object> result = new HashMap<>();

        try {
            collection = String.format("%sScores", param);
            result = cache.get(key);
        } catch (ExecutionException e) {
            e.printStackTrace();
        }

        log.info("Result : {}", result);

        if (Integer.valueOf(result.get("score").toString()) == -1) cache.invalidate(key);

        return result;
    }

    public static void reset() {
        cache.invalidateAll();
    }

    public static ArrayList<Map<String, Object>> getContent() {
        return new ArrayList<>(cache.asMap().values());
    }
}
