package net.redborder.malware.managers;

import com.aerospike.client.Host;
import com.aerospike.client.Key;
import com.aerospike.client.Record;
import com.aerospike.client.async.AsyncClient;
import com.aerospike.client.async.AsyncClientPolicy;
import com.aerospike.client.cluster.Node;
import com.aerospike.client.policy.Policy;
import com.aerospike.client.policy.RecordExistsAction;
import com.aerospike.client.policy.WritePolicy;
import com.sun.javafx.binding.StringFormatter;
import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

public class AeroSpikeManager {

    AsyncClient client;
    Config config;
    List<String> hosts;
    Integer timeout;
    WritePolicy writePolicy;

    private static final Logger log = LoggerFactory.getLogger(AeroSpikeManager.class);

    public AeroSpikeManager(Config conf) throws ConfigException {
        this.config = conf;
        this.hosts = config.getList("aerospike.servers");
        this.timeout = config.getInt("aerospike.clientTimeout", 500);
        this.writePolicy = new WritePolicy();
        this.writePolicy.recordExistsAction = RecordExistsAction.UPDATE;
        init();
    }

    private void init() {
        List<Host> servers = new ArrayList<>();

        for (String host : hosts) {
            String[] sp = host.split(":");
            servers.add(new Host(sp[0], Integer.parseInt(sp[1])));
        }

        AsyncClientPolicy cPolicy = new AsyncClientPolicy();
        cPolicy.timeout = timeout;

        client = new AsyncClient(cPolicy, servers.toArray(new Host[servers.size()]));

    }


    public Object getClient(){
        return client;
    }

    public Map<String, Object> get(String namespace, String collection, String key) {
        Record record = client.get(new Policy(), new Key(namespace, collection, key));

        if (record == null) {
            return new HashMap<>();
        } else {
            return record.bins;
        }
    }

    public boolean closeClient(){

        if(client.isConnected()) {
            client.close();
            return true;
        }else
            return false;
    }

    public boolean verifyConnection(){
        if(client.isConnected()) {

            StringBuilder sb = new StringBuilder("Getting nodes list : \n\n");
            sb.append(String.format("%-30s%s\n", "Address", "Port"));
            sb.append(String.format("%-34s\n", "").replace(" ","-"));
            for(Node n : client.getNodes()){
                sb.append(String.format("%-30s%s\n", n.getHost().name, String.valueOf(n.getHost().port)));
            }
            sb.append(String.format("%-34s\n", "").replace(" ","-"));
            log.info(sb.toString());
            return true;
        }else {
            return false;
        }
    }
}
