package net.redborder.malware.managers;

import com.aerospike.client.Host;
import com.aerospike.client.Key;
import com.aerospike.client.Record;
import com.aerospike.client.async.AsyncClient;
import com.aerospike.client.async.AsyncClientPolicy;
import com.aerospike.client.cluster.Node;
import com.aerospike.client.policy.Policy;
import com.aerospike.client.policy.QueryPolicy;
import com.aerospike.client.policy.RecordExistsAction;
import com.aerospike.client.policy.WritePolicy;
import com.aerospike.client.query.RecordSet;
import com.aerospike.client.query.Statement;
import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

// TODO this class should be remove
public class AeroSpikeManager {

    private static AeroSpikeManager INSTANCE;

    AsyncClient client;
    Config config;
    List<String> hosts;
    Integer timeout;
    WritePolicy writePolicy;
    private static String CONFIG_FILE = "/opt/rb/var/rb-reputation/config/config.properties";

    final Logger log = LoggerFactory.getLogger(AeroSpikeManager.class);

    public static AeroSpikeManager getInstance(){
        if(INSTANCE == null){
            try {
            	File tempFile = new File("/var/rb-reputation/config/config.properties");
            	
            	if (tempFile.exists())
            		CONFIG_FILE = "/var/rb-reputation/config/config.properties";
            	
            	INSTANCE = new AeroSpikeManager(new Config(CONFIG_FILE));
            } catch (ConfigException e) {
                e.printStackTrace();
            }
        }

        return INSTANCE;
    }

    public AeroSpikeManager(Config conf) throws ConfigException {
        this.config = conf;
        this.hosts = config.getList("aerospike.servers");
        this.timeout = config.getInt("aerospike.clientTimeout", 500);
        this.writePolicy = new WritePolicy();
        this.writePolicy.recordExistsAction = RecordExistsAction.UPDATE;
        init();
    }

    private void init() {
        List<Host> servers = new ArrayList<>();

        for (String host : hosts) {
            String[] sp = host.split(":");
            servers.add(new Host(sp[0], Integer.parseInt(sp[1])));
        }

        AsyncClientPolicy cPolicy = new AsyncClientPolicy();
        cPolicy.timeout = timeout;

        client = new AsyncClient(cPolicy, servers.toArray(new Host[servers.size()]));

    }


    public Object getClient() {
        return client;
    }

    public Map<String, Object> get(String namespace, String collection, String key) {

        Record record = client.get(new Policy(), new Key(namespace, collection, key));

        if (record == null) {
            return new HashMap<>();
        } else {
            return record.bins;
        }
    }

    public ArrayList<Map<String, Object>> getList(String namespace, String collection) {

        ArrayList<Map<String, Object>> result = new ArrayList<>();

        Statement stmt = new Statement();

        stmt.setNamespace(namespace);
        stmt.setSetName(collection);

        RecordSet records = client.query(new QueryPolicy(), stmt);

        while(records != null && records.next()){
            result.add(records.getRecord().bins);
        }

        if (records == null) {
            return null;
        } else {
            return result;
        }
    }

    public boolean closeClient() {

        if (client.isConnected()) {
            client.close();
            return true;
        } else
            return false;
    }

    public boolean verifyConnection() {
        if (client.isConnected()) {

            StringBuilder sb = new StringBuilder("Getting nodes list : \n\n");
            sb.append(String.format("%-30s%s\n", "Address", "Port"));
            sb.append(String.format("%-34s\n", "").replace(" ", "-"));
            for (Node n : client.getNodes()) {
                sb.append(String.format("%-30s%s\n", n.getHost().name, String.valueOf(n.getHost().port)));
            }
            sb.append(String.format("%-34s\n", "").replace(" ", "-"));
            log.info(sb.toString());
            return true;
        } else {
            return false;
        }
    }
}
