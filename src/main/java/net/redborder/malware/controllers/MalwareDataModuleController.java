package net.redborder.malware.controllers;

import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;
import net.redborder.malware.modules.data.AbstractDataModule;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class MalwareDataModuleController {

    private static final Logger log = LoggerFactory.getLogger(MalwareDataModuleController.class);

    private Map<String, AbstractDataModule> loadedModules = new HashMap<>();

    private Config conf;

    public MalwareDataModuleController(Config conf) {

        this.conf = conf;
    }

    public void init() {
        log.info("Init Data Module Controller");
        List<String> modules = null;

        try {
            // Getting modules from config file
            modules = conf.getList("malware.controller.datamodules");
        } catch (ConfigException e) {
            e.printStackTrace();
        }

        // Getting Package
        String packageName = this.getClass().getPackage().getName();

        Pattern pattern = Pattern.compile(String.format("%s\\.(?<class>[a-zA-Z]+)", packageName.replaceAll("\\.", Matcher.quoteReplacement("\\."))));

        for (String module : modules) {

            Matcher match;
            if ((match = pattern.matcher(module)).matches())
                try {
                    Constructor constructor = Class.forName(module).getConstructor(Config.class);
                    AbstractDataModule abstractDataModule = (AbstractDataModule)constructor.newInstance(conf);

                    loadedModules.put(match.group("class"), abstractDataModule);

                } catch (ClassNotFoundException e) {
                    e.printStackTrace();
                } catch (InstantiationException e) {
                    e.printStackTrace();
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                } catch (NoSuchMethodException e) {
                    e.printStackTrace();
                } catch (InvocationTargetException e) {
                    e.printStackTrace();
                }

        }

    }

    public void queryTo(String module) {
        System.out.println(((AbstractDataModule) loadedModules.get(module)).getDescription());
    }

    public int numberOfLoadedModules(){
        return loadedModules.size();
    }

    public AbstractDataModule getModule(String module){

        return loadedModules.containsKey(module) ? loadedModules.get(module) : null;
    }

    public Object getTotalFromModules(){

        LinkedList<Object> fullDataList = new LinkedList<>();

        for(AbstractDataModule dataModule : loadedModules.values()){
            fullDataList.add(dataModule.getFullData());
        }

        return fullDataList;
    }

    public Object getIncrementalFromModules(){

        LinkedList<Object> incrementalList = new LinkedList<>();

        for(AbstractDataModule dataModule : loadedModules.values()){
            incrementalList.add(dataModule.getIncremental());
        }

        return incrementalList;
    }

    public void queryAll(){

        for( AbstractDataModule obj : loadedModules.values()){
            System.out.println(obj.getDescription());
        }

    }

    public void start(){

    }

}
