package net.redborder.malware.controllers;

import net.redborder.malware.config.Config;
import net.redborder.malware.tasks.*;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;

public class MalwareTaskController implements TaskCompletionListener {

    // Threads to run
    private int NUM_WORKERS;

    private Map<String, Worker> workerList = null;

    private ExecutorService executor = null;

    private Config conf;

    // Workers input
    PriorityBlockingQueue<Object> priorityBlockingQueue;

    // Workers output
    LinkedBlockingQueue<Object> resultBlockingQueue;


    public MalwareTaskController(Config conf, PriorityBlockingQueue<Object> priorityBlockingQueue, LinkedBlockingQueue<Object> resultBlockingQueue) {

        this.conf = conf;

        NUM_WORKERS = this.conf.getInt("malware.task.controller.wokers", 5);

        executor = Executors.newFixedThreadPool(NUM_WORKERS);

        this.priorityBlockingQueue = priorityBlockingQueue;

        this.resultBlockingQueue = resultBlockingQueue;

        this.workerList = new HashMap<>();

    }

    public void start(){

        for (int i = 0; i < NUM_WORKERS; i++) {
            Worker worker = new Worker(new ReputationTask(this.conf, this.conf, priorityBlockingQueue, resultBlockingQueue));
            this.workerList.put(String.format("worker%03d", i), worker);
            executor.submit(worker);
        }

    }

    // Run single task
    public static void runTask(Task task) {
        final Worker thread = new Worker(task);
        ExecutorService executor = Executors.newSingleThreadExecutor();
        executor.submit(thread);
    }

    // Run single task with listener
    public static void runTask(Task task, TaskCompletionListener listener) {
        final Worker thread = new Worker(task);
        thread.addTaskCompletionListener(listener);

        ExecutorService executor = Executors.newSingleThreadExecutor();
        executor.submit(thread);
    }

    public void pauseWorker(String taskName) {
        this.workerList.get(taskName).pauseTask();
    }

    public void resumeWorker(String taskName) {
        this.workerList.get(taskName).resumeTask();
    }

    public String getWorkersStatus(String taskName) {
        return this.workerList.containsKey(taskName) ? this.workerList.get(taskName).getCurrentStatusString() : "Task not found!";
    }

    public String getWorkerStatus() {

        StringBuilder sb = new StringBuilder();

        for (Worker thread : this.workerList.values())
            sb.append(String.format("Task id : %s %n\tStatus : %s%n", thread.getTask().getTaskName(), thread.getCurrentStatusString()));

        return sb.toString();
    }

    public void pauseWorkers() {
        for (Worker thread : this.workerList.values())
            thread.pauseTask();
    }

    public void resumeWorkers() {
        for (Worker thread : this.workerList.values())
            thread.resumeTask();
    }

    public void shutdown() {

        // Cancell tasks
        if (!workerList.isEmpty())
            for (Worker worker : workerList.values())
                if (!worker.isComplete())
                    worker.cancelTask();
        // Clear task list
        this.workerList.clear();
        this.workerList = null;
        // shutdown executor
        executor.shutdown();
    }

    @Override
    public void taskCompleted(Worker task) {

    }

}
