package net.redborder.malware.controllers;

import net.redborder.malware.config.Config;
import net.redborder.malware.tasks.Task;
import net.redborder.malware.tasks.TaskCompletionListener;
import net.redborder.malware.tasks.Worker;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.PriorityBlockingQueue;

public class MalwareTaskController implements TaskCompletionListener{

    private int THREADS;

    private Map<String, Worker> taskList = new HashMap<>();
    private ExecutorService executor = null;

    PriorityBlockingQueue<Object> priorityBlockingQueue;

    public MalwareTaskController(Config conf, PriorityBlockingQueue<Object> queue) {
        THREADS = conf.getInt("malware.task.controller.threads", 5);
        executor = Executors.newFixedThreadPool(THREADS);
        priorityBlockingQueue = queue;
    }

    public void start(){

    }

    public void runTask(Task task){

        final Worker thread = new Worker(task);
        this.taskList.put(thread.getTask().getTaskName(), thread);

        executor.submit(thread);
    }

    public void runTask(Task task, TaskCompletionListener listener){
        final Worker thread = new Worker(task);

        thread.addTaskCompletionListener(listener);
        this.taskList.put(thread.getTask().getTaskName(), thread);

        executor.submit(thread);
    }

    public void pauseTask(String taskName){
        this.taskList.get(taskName).pauseTask();
    }

    public void resumetask(String taskName){
        this.taskList.get(taskName).resumeTask();
    }

    public String getTaskStatus(String taskName){
        return this.taskList.containsKey(taskName) ? this.taskList.get(taskName).getCurrentStatusString() : "Task not found!";
    }

    public String getTasksStatus(){

        StringBuilder sb = new StringBuilder();

        for(Worker thread : this.taskList.values())
            sb.append(String.format("Task id : %s %n\tStatus : %s%n", thread.getTask().getTaskName(), thread.getCurrentStatusString()));

        return sb.toString();
    }

    public void pauseTasks(){
        for( Worker thread : this.taskList.values())
            thread.pauseTask();
    }

    public void resumeTasks(){
        for( Worker thread : this.taskList.values())
            thread.resumeTask();
    }

    public void shutdown(){
        // Cancell tasks
        for(Worker worker : taskList.values())
            if(!worker.isComplete())
                worker.cancelTask();
        // Clear task list
        this.taskList.clear();
        this.taskList = null;
        // shutdown executor
        executor.shutdown();
    }

    @Override
    public void taskCompleted(Worker task) {

    }
}
