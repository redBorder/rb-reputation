package net.redborder.malware.controllers;

import net.redborder.malware.config.Config;
import net.redborder.malware.tasks.ReputationTask;
import net.redborder.malware.tasks.Task;
import net.redborder.malware.tasks.TaskListener;
import net.redborder.malware.tasks.Worker;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.PriorityBlockingQueue;

public class MalwareTaskController {

    private static final Logger log = LoggerFactory.getLogger(MalwareTaskController.class);

    private static MalwareTaskController INSTANCE;

    public static void init(Config conf, PriorityBlockingQueue<Object> priorityBlockingQueue){
        if(INSTANCE == null)
            INSTANCE = new MalwareTaskController(conf, priorityBlockingQueue);
    }

    // Threads to run
    private int NUM_WORKERS;

    private Map<String, Worker> workerList = null;
    private Map<String, Timer> timerTaskList = null;

    private ExecutorService executor = null;

    private Config conf;

    // Workers input
    PriorityBlockingQueue<Object> priorityBlockingQueue;


    public MalwareTaskController(Config conf, PriorityBlockingQueue<Object> priorityBlockingQueue) {

        this.conf = conf;

        executor = Executors.newCachedThreadPool();


        this.priorityBlockingQueue = priorityBlockingQueue;

        this.workerList = new HashMap<>();
        this.timerTaskList = new HashMap<>();

        reload();
    }

    public void reload(){
        NUM_WORKERS = conf.getInt("malware.workers", 5);

        if(!workerList.isEmpty()){
            Iterator<Map.Entry<String, Worker>> it = workerList.entrySet().iterator();

            while(it.hasNext() && NUM_WORKERS < workerList.size()){
                workerList.remove(it.next().getKey());
            }
        }

        for(int i = workerList.size(); i < NUM_WORKERS; i++){

            if(!workerList.containsKey(String.format("worker%03d", i))) {
                Worker worker = new Worker(new ReputationTask(this.conf, this.conf, priorityBlockingQueue));
                workerList.put(String.format("worker%03d", i), worker);
                executor.submit(worker);

            } else {
                for (int j = 1; j < Integer.MAX_VALUE; j++) {
                    if(!workerList.containsKey(String.format("worker%03d", j))){
                        workerList.put(String.format("worker%03d", i), new Worker(new ReputationTask(this.conf, this.conf, priorityBlockingQueue)));
                    }
                }
            }

        }

        int workersUP = workerList.size();

        if(workersUP > 0){
            log.info("Raised {} workers", workersUP);
        }

    }

    // Run single task
    public static void runTask(Task task) {
        final Worker thread = new Worker(task);
        ExecutorService executor = Executors.newSingleThreadExecutor();
        executor.submit(thread);
    }

    // Run single task with listener
    public static void runTask(Task task, TaskListener listener) {
        final Worker thread = new Worker(task);
        thread.addTaskCompletionListener(listener);

        ExecutorService executor = Executors.newSingleThreadExecutor();
        executor.submit(thread);
    }

    public static void runTimerTask(TimerTask task, long millis){
        Timer timer = new Timer();
        timer.scheduleAtFixedRate(task, 0L, millis);
        INSTANCE.timerTaskList.put("", timer);
    }

    public static void reloadWorkers(){
        INSTANCE.reload();
    }

    public static void pauseWorker(String taskName) {
        INSTANCE.workerList.get(taskName).pauseTask();
    }

    public static void resumeWorker(String taskName) {
        INSTANCE.workerList.get(taskName).resumeTask();
    }

    public String getWorkersStatus(String taskName) {
        return this.workerList.containsKey(taskName) ? this.workerList.get(taskName).getCurrentStatusString() : "Task not found!";
    }

    public String getWorkerStatus() {

        StringBuilder sb = new StringBuilder();

        for (Worker thread : this.workerList.values())
            sb.append(String.format("Task id : %s %n\tStatus : %s%n", thread.getTask().getTaskName(), thread.getCurrentStatusString()));

        return sb.toString();
    }


    public void pauseWorkers() {
        for (Worker thread : this.workerList.values())
            thread.pauseTask();
    }

    public void resumeWorkers() {
        for (Worker thread : this.workerList.values())
            thread.resumeTask();
    }

    public static void shutdownController(){
        INSTANCE.shutdown();
    }

    public void shutdown() {

        log.info("Shutting down workers");

        if(!workerList.isEmpty()){
            Iterator<Map.Entry<String, Worker>> it = workerList.entrySet().iterator();

            while(it.hasNext()){
                Worker worker = it.next().getValue();

                if(!worker.isComplete()){
                    worker.cancelTask();
                }
            }
        }

        // Clear task list
        this.workerList.clear();
        this.workerList = null;
        // shutdown executor
        executor.shutdown();
    }

}
