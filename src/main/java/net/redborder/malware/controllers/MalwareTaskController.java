package net.redborder.malware.controllers;

import net.redborder.malware.config.Config;
import net.redborder.malware.tasks.*;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;

public class MalwareTaskController implements TaskCompletionListener {

    private int THREADS;

    private Map<String, Worker> taskList = null;
    private ExecutorService executor = null;

    private Object currentProcessElement;

    PriorityBlockingQueue<Object> priorityBlockingQueue;
    LinkedBlockingQueue<Object> resultBlockingQueue;


    public MalwareTaskController(Config conf, PriorityBlockingQueue<Object> priorityBlockingQueue, LinkedBlockingQueue<Object> resultBlockingQueue) {
        THREADS = conf.getInt("malware.task.controller.threads", 5);
        executor = Executors.newFixedThreadPool(THREADS);

        this.priorityBlockingQueue = priorityBlockingQueue;

        this.resultBlockingQueue = resultBlockingQueue;

        this.taskList = new HashMap<>();

    }

    public void runTask(Task task) {

        final Worker thread = new Worker(task);
        this.taskList.put(thread.getTask().getTaskName(), thread);
        executor.submit(thread);
    }

    public void runTask(Task task, TaskCompletionListener listener) {
        final Worker thread = new Worker(task);

        thread.addTaskCompletionListener(listener);
        this.taskList.put(thread.getTask().getTaskName(), thread);

        executor.submit(thread);
    }

    public void pauseTask(String taskName) {
        this.taskList.get(taskName).pauseTask();
    }

    public void resumetask(String taskName) {
        this.taskList.get(taskName).resumeTask();
    }

    public String getTaskStatus(String taskName) {
        return this.taskList.containsKey(taskName) ? this.taskList.get(taskName).getCurrentStatusString() : "Task not found!";
    }

    public Object getCurrentProcessElement() {
        return currentProcessElement;
    }

    public String getTasksStatus() {

        StringBuilder sb = new StringBuilder();

        for (Worker thread : this.taskList.values())
            sb.append(String.format("Task id : %s %n\tStatus : %s%n", thread.getTask().getTaskName(), thread.getCurrentStatusString()));

        return sb.toString();
    }

    public void pauseTasks() {
        for (Worker thread : this.taskList.values())
            thread.pauseTask();
    }

    public void resumeTasks() {
        for (Worker thread : this.taskList.values())
            thread.resumeTask();
    }

    public void shutdown() {

        // Cancell tasks
        if (!taskList.isEmpty())
            for (Worker worker : taskList.values())
                if (!worker.isComplete())
                    worker.cancelTask();
        // Clear task list
        this.taskList.clear();
        this.taskList = null;
        // shutdown executor
        executor.shutdown();
    }

    @Override
    public void taskCompleted(Worker task) {

    }

}
