package net.redborder.malware.controllers;

import net.redborder.malware.config.Config;
import net.redborder.malware.tasks.ReputationTask;
import net.redborder.malware.tasks.Task;
import net.redborder.malware.tasks.TaskListener;
import net.redborder.malware.tasks.Worker;

import java.util.HashMap;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.PriorityBlockingQueue;

public class MalwareTaskController {

    private static MalwareTaskController INSTANCE;

    public static void init(Config conf, PriorityBlockingQueue<Object> priorityBlockingQueue){
        if(INSTANCE == null)
            INSTANCE = new MalwareTaskController(conf, priorityBlockingQueue);
    }

    // Threads to run
    private int NUM_WORKERS;

    private Map<String, Worker> workerList = null;
    private Map<String, Timer> timerTaskList = null;

    private ExecutorService executor = null;

    private Config conf;

    // Workers input
    PriorityBlockingQueue<Object> priorityBlockingQueue;


    public MalwareTaskController(Config conf, PriorityBlockingQueue<Object> priorityBlockingQueue) {

        this.conf = conf;

        NUM_WORKERS = this.conf.getInt("malware.task.controller.wokers", 5);

        executor = Executors.newFixedThreadPool(NUM_WORKERS);

        this.priorityBlockingQueue = priorityBlockingQueue;

        this.workerList = new HashMap<>();
        this.timerTaskList = new HashMap<>();

    }

    public static void start(){
        INSTANCE.ignit();
    }

    public void ignit(){

        for (int i = 0; i < NUM_WORKERS; i++) {
            Worker worker = new Worker(new ReputationTask(this.conf, this.conf, priorityBlockingQueue));
            this.workerList.put(String.format("worker%03d", i), worker);
            executor.submit(worker);
        }

    }

    // Run single task
    public static void runTask(Task task) {
        final Worker thread = new Worker(task);
        ExecutorService executor = Executors.newSingleThreadExecutor();
        executor.submit(thread);
    }

    // Run single task with listener
    public static void runTask(Task task, TaskListener listener) {
        final Worker thread = new Worker(task);
        thread.addTaskCompletionListener(listener);

        ExecutorService executor = Executors.newSingleThreadExecutor();
        executor.submit(thread);
    }

    public static void runTimerTask(TimerTask task, long millis){
        Timer timer = new Timer();
        timer.scheduleAtFixedRate(task, 0L, millis);
        INSTANCE.timerTaskList.put("",timer);
    }

    public static void pauseWorker(String taskName) {
        INSTANCE.workerList.get(taskName).pauseTask();
    }

    public static void resumeWorker(String taskName) {
        INSTANCE.workerList.get(taskName).resumeTask();
    }

    public String getWorkersStatus(String taskName) {
        return this.workerList.containsKey(taskName) ? this.workerList.get(taskName).getCurrentStatusString() : "Task not found!";
    }

    public String getWorkerStatus() {

        StringBuilder sb = new StringBuilder();

        for (Worker thread : this.workerList.values())
            sb.append(String.format("Task id : %s %n\tStatus : %s%n", thread.getTask().getTaskName(), thread.getCurrentStatusString()));

        return sb.toString();
    }


    public void pauseWorkers() {
        for (Worker thread : this.workerList.values())
            thread.pauseTask();
    }

    public void resumeWorkers() {
        for (Worker thread : this.workerList.values())
            thread.resumeTask();
    }

    public static void shutdownController(){
        INSTANCE.shutdown();
    }

    public void shutdown() {

        // Cancell tasks
        if (!workerList.isEmpty())
            for (Worker worker : workerList.values())
                if (!worker.isComplete())
                    worker.cancelTask();

        // Clear task list
        this.workerList.clear();
        this.workerList = null;
        // shutdown executor
        executor.shutdown();
    }

}
