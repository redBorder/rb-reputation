package net.redborder.malware.controllers;

import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;
import net.redborder.malware.modules.data.DataModule;
import net.redborder.malware.modules.output.AbstractOutputModule;
import net.redborder.malware.modules.output.OutputModule;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class MalwareOutputModuleController{

    private static final Logger log = LoggerFactory.getLogger(MalwareOutputModuleController.class);

    // Map of data module loaded
    private Map<String, OutputModule> loadedModules = new HashMap<>();

    private Config conf;

    public MalwareOutputModuleController(Config conf){
        this.conf = conf;
    }

    public void init() {

        log.info("Init Output Module Controller");

        List<String> modules = new ArrayList<>();

        try {
            // Getting modules from config file

            if(conf.getProperties().contains("malware.controller.outputmodules"))
                modules = conf.getList("malware.controller.outputmodules");

        } catch (ConfigException e) {
            e.printStackTrace();
        }

        Pattern pattern = Pattern.compile("(?<class>.+(?<module>[a-zA-Z]+))");

        for (String module : modules) {

            Matcher match;

            if ((match = pattern.matcher(module)).matches())

                try {

                    Constructor constructor = Class.forName(match.group("class")).getConstructor(Config.class);

                    OutputModule loadedOutputModule = (OutputModule)constructor.newInstance(conf);

                    loadedOutputModule.init();

                    int preference = Integer.valueOf(match.group("pref"));

                    loadedModules.put(loadedOutputModule.getOutputModuleName(), loadedOutputModule);

                } catch (ClassNotFoundException e) {
                    e.printStackTrace();
                } catch (InstantiationException e) {
                    e.printStackTrace();
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                } catch (NoSuchMethodException e) {
                    e.printStackTrace();
                } catch (InvocationTargetException e) {
                    e.printStackTrace();
                }

        }


    }

    public void writeInOutput(String outputModuleName, Object data){

        if(loadedModules.containsKey(outputModuleName)){
            loadedModules.get(outputModuleName).write(data);
        }

    }


}
