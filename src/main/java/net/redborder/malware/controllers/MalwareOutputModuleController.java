package net.redborder.malware.controllers;

import com.aerospike.client.Record;
import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;
import net.redborder.malware.modules.data.DataModule;
import net.redborder.malware.modules.output.AbstractOutputModule;
import net.redborder.malware.modules.output.OutputModule;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class MalwareOutputModuleController {

    private static final Logger log = LoggerFactory.getLogger(MalwareOutputModuleController.class);

    public enum LoaderType {
        REALTIME("rt"), FAST("fb"), SLOW("sb");
        public String value;

        LoaderType(String value) {
            this.value = value;
        }
    }

    // Map of data module loaded
    private Map<String, OutputModule> loadedModules = new HashMap<>();

    private Config conf;

    public MalwareOutputModuleController(Config conf) {
        this.conf = conf;
    }

    public void init() {

        log.info("Init Output Module Controller");

        List<String> modules = new ArrayList<>();

        try {
            // Getting modules from config file
            modules = conf.getList("malware.controller.outputmodules");
            log.info("Output modules to load : {}", modules);

        } catch (ConfigException e) {
            e.printStackTrace();
        }

        Pattern pattern = Pattern.compile("(?<class>.+(?<module>[a-zA-Z]+))");

        for (String module : modules) {

            Matcher match;

            if ((match = pattern.matcher(module)).matches())

                try {

                    Constructor constructor = Class.forName(match.group("class")).getConstructor(Config.class);

                    OutputModule loadedOutputModule = (OutputModule) constructor.newInstance(conf);

                    loadedOutputModule.init();

                    loadedModules.put(loadedOutputModule.getOutputModuleName(), loadedOutputModule);

                    log.info("Loaded {} output module", loadedOutputModule.getOutputModuleName());

                    log.info("Loaded modules : {}", loadedModules);

                } catch (ClassNotFoundException e) {
                    e.printStackTrace();
                } catch (InstantiationException e) {
                    e.printStackTrace();
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                } catch (NoSuchMethodException e) {
                    e.printStackTrace();
                } catch (InvocationTargetException e) {
                    e.printStackTrace();
                }

        }

    }

    public void writeInOutput(String outputModuleName, Object data) {

        log.info("Writing data ...");

        if (loadedModules.containsKey(outputModuleName)) {
            log.info("Writing in {}", outputModuleName);
            loadedModules.get(outputModuleName).write(data);
        } else {
            log.info("Module {} not found", outputModuleName);
        }

    }

    public void updateInOutput(String outputModuleName, Object data){

        log.info("Update data ...");

        if (loadedModules.containsKey(outputModuleName)) {
            log.info("Update in {}", outputModuleName);
            loadedModules.get(outputModuleName).update((Map<String, Object>) data);
        } else {
            log.info("Module {} not found", outputModuleName);
        }
    }

}
