package net.redborder.malware;

import net.redborder.malware.config.Config;
import net.redborder.malware.tasks.Task;
import net.redborder.malware.tasks.TaskCompletionListener;
import net.redborder.malware.tasks.TaskThread;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class MalwareTaskController {

    private int THREADS = 5;

    private List<TaskThread> taskList = new ArrayList<>();
    private ExecutorService executor = null;

    public MalwareTaskController(Config conf) {
        executor = Executors.newFixedThreadPool(THREADS);
    }

    public void runTask(Task task){

        final TaskThread thread = new TaskThread(task);
        this.taskList.add(0, thread);

        executor.submit(thread);
    }

    public void runTask(Task task, TaskCompletionListener listener){
        final TaskThread thread = new TaskThread(task);

        thread.addTaskCompletionListener(listener);
        this.taskList.add(0, thread);

        executor.submit(thread);
    }

    public void pauseTask(){
        for( TaskThread thread : this.taskList)
            thread.pauseTask();
    }

    public String getTasksStatus(){

        StringBuilder sb = new StringBuilder();

        for(TaskThread thread : this.taskList)
            sb.append(String.format("Task id : %d %n\tStatus : %s%n", thread.getThreadID(), thread.getCurrentStatusString()));

        return sb.toString();
    }

    public void resumeTask(){
        for( TaskThread thread : this.taskList)
            thread.resumeTask();

    }

    public void shutdown(){
        this.taskList.clear();
        this.taskList = null;
        executor.shutdown();
    }

}
