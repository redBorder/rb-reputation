package net.redborder.malware;

import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;
import net.redborder.malware.controllers.MalwareController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import spark.Request;
import spark.Response;
import spark.Route;
import spark.Session;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Executors;
import java.util.concurrent.PriorityBlockingQueue;

import static spark.Spark.*;

import static spark.Spark.get;

public class MalwareREST {

    private static final Logger log = LoggerFactory.getLogger(MalwareREST.class);

    private static String ipAddress = "0.0.0.0";
    private static int port = 4567;

    private static Config conf;

    private static BlockingQueue<Object> priorityBlockingQueue;
    private static Map<Session, Object> results;

    public static void init(Config newConfig, final BlockingQueue<Object> priorityQueue) {

        conf = newConfig;
        priorityBlockingQueue = priorityQueue;

        loadConfig();
        setIpAddress(ipAddress);
        setPort(port);

        get(new Route("/malware/total") {

            @Override
            public Object handle(Request request, Response response) {

                Map<String, Object> petition = new HashMap<>();

                CountDownLatch latch = new CountDownLatch(1);
                Session session = request.session(true);
                petition.put("latch", latch);
                petition.put("session", session);

                try {
                    latch.await();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                return session.attribute("result");
            }
        });

        post(new Route("/malware/revision/") {
            @Override
            public Object handle(Request request, Response response) {

                CountDownLatch latch = new CountDownLatch(1);
                Session session = request.session(true);
                session.attribute("latch", latch);

                try {
                    priorityBlockingQueue.put(session);
                    latch.await();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                return session.attribute("result");
            }
        });

        post(new Route("/malware/revision/:num") {

            @Override
            public Object handle(Request request, Response response) {

                CountDownLatch latch = new CountDownLatch(1);

                final Session session = request.session(true);
                session.attribute("latch", latch);

                try {
                    priorityBlockingQueue.put(session);
                    latch.await();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                return session.attribute("result");
            }
        });

        post(new Route("/malware/:sha") {

            @Override
            public Object handle(Request request, Response response) {
                String sha256 = request.params(":sha");

                if (sha256.matches("[A-Fa-f0-9]{64}")) {

                    CountDownLatch latch = new CountDownLatch(1);
                    Session session = request.session(true);
                    session.attribute("latch", latch);

                    try {
                        priorityBlockingQueue.put(session);
                        latch.await();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }

                    return session.attribute("result");

                } else {
                    return "Your SHA256 is not complete, It must consist of 64 hexadecimal characters";
                }
            }


        });
    }

    public static int getCurrentPort() {
        return port;
    }

    public static void setController(MalwareController mcont) {

    }

    private static void loadConfig() {
        try {
            String[] host = conf.get("malware.server").split(":");
            ipAddress = host[0];
            port = Integer.valueOf(host[1]);

        } catch (ConfigException e) {
            e.printStackTrace();
        }

    }

}


