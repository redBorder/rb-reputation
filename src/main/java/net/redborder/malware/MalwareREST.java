package net.redborder.malware;

import net.redborder.malware.managers.AeroSpikeManager;
import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;
import net.redborder.malware.managers.KafkaManager;
import net.redborder.malware.tasks.timertask.QueryTimerTask;
import org.codehaus.jackson.map.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

import static spark.Spark.get;

public class MalwareREST {

    private static final String NAMESPACE = "malware";

    private static final String COLLECTION = "rb_malware";

    private static AeroSpikeManager asm = null;
    private static KafkaManager km = null;

    private static final Logger log = LoggerFactory.getLogger(MalwareREST.class);

    private static ObjectMapper _mapper = new ObjectMapper();
    private static QueryTimerTask querytt = null;

    public static void main(String[] args){

        // AeroSpike
        Config.addList("aerospike.servers", "10.0.150.200:3000");
        Config.addInt("aerospike.clientTimeout", "5000");
        Config.addLong("aerospike.query.period", String.valueOf(60000));

        // Kafka
        Config.add("metadata.broker.list", "10.0.150.200:9092");
        Config.add("zookeeper.connect", "10.0.150.200:2181");
        Config.add("group.id", "malware");
        Config.add("zookeeper.session.timeout.ms", "400");
        Config.add("zookeeper.sync.time.ms", "200");
        Config.add("auto.commit.interval.ms", "1000");

        Config conf = Config.createConfig();

        Timer timer = new Timer();

        try {
            asm = new AeroSpikeManager(conf);
            km = new KafkaManager(conf);
            km.consumeFromTopic("rb_malware", 1);

            if(asm.verifyConnection())
                log.info("Connection stablished");

            querytt = new QueryTimerTask(asm, 2);

            timer.schedule(querytt, 0, conf.getInt("aerospike.query.period"));

        } catch (ConfigException e) {
            e.printStackTrace();
        }

        get("/malware/total/", (req, res) -> _mapper.writeValueAsString(querytt.getTotal()));

        get("/malware/revision/", (req, res) -> querytt.getCurrentRevision());

        get("/malware/revision/:num", (req, res) -> querytt.getRevNum(Integer.valueOf(req.params(":num"))));

        get("/malware/:sha", (req, res) -> {

            String sha256 = req.params(":sha");

            if (sha256.matches("[A-Fa-f0-9]{64}")) {

                Map<String, Object> result = asm.get(NAMESPACE, COLLECTION, sha256);

                Map<String, Object> mapJson = new HashMap<String, Object>();

                mapJson.put(sha256, result.get("malware_name"));

                return _mapper.writeValueAsString(mapJson);

            } else
                return "Your SHA256 is not complete, It must consist of 64 hexadecimal characters";

        });




    }

}
