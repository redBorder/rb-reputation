package net.redborder.malware;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;
import net.redborder.malware.modules.data.AbstractDataModule;
import net.redborder.malware.modules.data.DataModule;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import spark.Request;
import spark.Response;
import spark.Route;
import spark.Session;

import java.io.IOException;
import java.util.*;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.CountDownLatch;

import static ch.lambdaj.Lambda.*;
import static spark.Spark.*;

public class MalwareREST {

    public enum OPERATION {
        QUERY("query"), TOTAL("total"), INCREMENTAL("incremental");

        public String value;

        OPERATION(String value) {
            this.value = value;
        }
    }

    public enum HTTP {
        SYNCHRONOUS("synchronous"), ASYNCHRONOUS("asynchronous");

        public String value;

        HTTP(String value) {
            this.value = value;
        }
    }

    public enum PROCESS {
        AGILE("agile"), COMPLETE("complete");

        public String value;

        PROCESS(String value) {
            this.value = value;
        }
    }

    public enum RESPONSE {
        SIMPLE("simple"), VERBOSE("verbose");

        public String value;

        RESPONSE(String value) {
            this.value = value;
        }
    }

    private static final Logger log = LoggerFactory.getLogger(MalwareREST.class);
    private static final Logger audit = LoggerFactory.getLogger("audit");

    public static final String PARAM_QUERY_RESPONSE = "response";
    public static final String PARAM_QUERY_HTTP = "http";
    public static final String PARAM_QUERY_PROCESS = "process";

    public static final String PARAM_FULLDATA_TYPE = "type";

    public static final String PARAM_API_OPERATION = "operation";

    private static String ipAddress = "0.0.0.0";
    private static int port = 4567;

    private static Config conf;

    private static BlockingQueue<Object> priorityBlockingQueue;

    private static String version = "1.0";

    public static void init(Config newConfig, final BlockingQueue<Object> priorityQueue) {

        conf = newConfig;
        priorityBlockingQueue = priorityQueue;

        loadConfig();
        setIpAddress(ipAddress);
        setPort(port);

        get(new Route(String.format("/api/v%s/malware/total", version)) {

            @Override
            public Object handle(Request request, Response response) {

                CountDownLatch latch = new CountDownLatch(1);
                Session session = request.session(true);

                audit.info("Session with reputation engine created {}", session.raw().getCreationTime());

                session.attribute("latch", latch);
                session.attribute(PARAM_API_OPERATION, OPERATION.TOTAL);
                session.attribute(PARAM_QUERY_RESPONSE, RESPONSE.SIMPLE);
                session.attribute(PARAM_QUERY_PROCESS, PROCESS.COMPLETE);
                session.attribute(PARAM_FULLDATA_TYPE, DataModule.FullDataType.valueOf("TOTAL"));

                try {
                    priorityBlockingQueue.put(session);
                    latch.await();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                LinkedList<ArrayList<Map<String, Object>>> totalList = session.attribute("finalResult");
                ObjectMapper mapper = new ObjectMapper();
                String json = "";

                try {
                    json = mapper.writeValueAsString(totalList);
                } catch (JsonProcessingException e) {
                    e.printStackTrace();
                }

                return json;
            }
        });

        get(new Route(String.format("/api/v%s/malware/total/:type", version)) {
            @Override
            public Object handle(Request request, Response response) {

                String type = request.params(":type");

                log.info("Full data type : {}", type);

                if(!type.matches("(?:hash|ip|url)")){
                    response.status(404);
                    return String.format("/api/v%s/malware/total/%s", version, type);
                }

                CountDownLatch latch = new CountDownLatch(1);
                Session session = request.session(true);

                audit.info("Session with reputation engine created {}", session.raw().getCreationTime());

                session.attribute("latch", latch);
                session.attribute(PARAM_API_OPERATION, OPERATION.TOTAL);
                session.attribute(PARAM_QUERY_RESPONSE, RESPONSE.SIMPLE);
                session.attribute(PARAM_QUERY_PROCESS, PROCESS.COMPLETE);
                session.attribute(PARAM_FULLDATA_TYPE, DataModule.FullDataType.valueOf(type.toUpperCase()));

                try {
                    priorityBlockingQueue.put(session);
                    latch.await();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                LinkedList<ArrayList<Map<String, Object>>> totalList = session.attribute("finalResult");
                ObjectMapper mapper = new ObjectMapper();
                String json = "";

                try {
                    json = mapper.writeValueAsString(totalList);
                } catch (JsonProcessingException e) {
                    e.printStackTrace();
                }

                return json;
            }
        });

        get(new Route(String.format("/api/v%s/malware/incremental", version)) {

            @Override
            public Object handle(Request request, Response response) {

                String value = IncrementalList.getValue(IncrementalList.Last.INCREMENTAL);

                if (!value.matches("N/A"))
                    response.status(200);
                else
                    response.status(404);

                return value;
            }
        });


        get(new Route(String.format("/api/v%s/malware/incremental/:id", version)) {

            @Override
            public Object handle(Request request, Response response) {

                String id = request.params(":id");

                Session session = request.session(true);

                audit.info("Session with reputation engine created {}", session.raw().getCreationTime());

                ObjectMapper _mapper = new ObjectMapper();

                ArrayList<Map<String, Object>> result = IncrementalList.getList(id);

                if (!result.isEmpty()) {
                    response.status(200);
                    String jsonInc = "";

                    try {
                        jsonInc = _mapper.writeValueAsString(result);
                    } catch (JsonProcessingException e) {
                        e.printStackTrace();
                    }

                    return jsonInc;

                } else {
                    response.status(404);
                    return String.format("%s Not found!", id);
                }
            }
        });

        get(new Route(String.format("/api/v%s/malware/incremental/:id/:type", version)) {

            @Override
            public Object handle(Request request, Response response) {

                String id = request.params(":id");
                log.info("Selected list : {}", id);
                String type = request.params(":type");
                log.info("Filtered by : {} ", type);

                if(!type.matches("(?:hash|ip|url)")){
                    response.status(404);
                    return String.format("/api/v%s/malware/incremental/%s/%s", version, id, type);
                }


                Session session = request.session(true);

                audit.info("Session with reputation engine created {}", session.raw().getCreationTime());

                ObjectMapper _mapper = new ObjectMapper();

                ArrayList<Map<String, Object>> result = IncrementalList.getList(id);

                for(Map<String, Object> mapa : result)
                    log.info("Key set : {}",mapa.keySet());

                List<Map<String, Object>> selectedType = select(result, having(on(Map.class).containsKey(type)));

                if (!result.isEmpty()) {
                    response.status(200);
                    String jsonInc = "";

                    try {
                        jsonInc = _mapper.writeValueAsString(selectedType);
                    } catch (JsonProcessingException e) {
                        e.printStackTrace();
                    }

                    return jsonInc;

                } else {
                    response.status(404);
                    return String.format("%s Not found!", id);
                }
            }
        });


        post(new Route(String.format("/api/v%s/malware/query", version)) {

            @Override
            public Object handle(Request request, Response response) {

                String patternSha256 = "[A-Fa-f0-9]{64}";
                String patternMD5 = "[A-Fa-f0-9]{32}";
                String patternIPV4 = "(?:[0-2]?[0-5]?[0-5])(?:\\.(?:[0-2]?[0-5]?[0-5])){3}";

                ObjectMapper _mapper = new ObjectMapper();
                Map<String, Object> json = new HashMap<>();

                Session session = request.session(true);
                audit.info("Session with reputation engine created {}", session.raw().getCreationTime());

                try {

                    if (!request.body().isEmpty()) {
                        json = _mapper.readValue(request.body(), new TypeReference<HashMap<String, Object>>() {
                        });

                        for (Map.Entry entry : json.entrySet()) {
                            session.attribute(entry.getKey().toString(), entry.getValue());
                        }
                    }

                } catch (IOException e) {
                    e.printStackTrace();
                }

                session.attribute(PARAM_API_OPERATION, OPERATION.QUERY);

                Set<String> paramsFilter = new HashSet<>();
                paramsFilter.add(AbstractDataModule.QUERY_PARAM.HASH.value);
                paramsFilter.add(AbstractDataModule.QUERY_PARAM.IP.value);
                paramsFilter.add(AbstractDataModule.QUERY_PARAM.URL.value);

                Map<String, Object> params = new HashMap<>();

                params.putAll(json);
                params.keySet().retainAll(paramsFilter);

                log.info("Params : {}\nJSON : {}", params, json);

                if (!params.isEmpty()) {

                    for(Map.Entry<String, Object> entry : params.entrySet())
                        if(entry.getValue().toString().isEmpty()){
                            response.status(400);
                            return String.format("Param \"%s\" cannot be empty", entry.getKey());
                        }

                        session.attribute("query", params);

                }else {
                    response.status(400);
                    return "Param \"hash\", \"ip\", or \"url\" not found!";
                }


                if (json.containsKey(PARAM_QUERY_RESPONSE))
                    session.attribute(PARAM_QUERY_RESPONSE, RESPONSE.valueOf(json.get(PARAM_QUERY_RESPONSE).toString().toUpperCase()));
                else
                    session.attribute(PARAM_QUERY_RESPONSE, RESPONSE.SIMPLE);

                if (json.containsKey(PARAM_QUERY_PROCESS))
                    session.attribute(PARAM_QUERY_PROCESS, PROCESS.valueOf(json.get(PARAM_QUERY_PROCESS).toString().toUpperCase()));
                else
                    session.attribute(PARAM_QUERY_PROCESS, PROCESS.AGILE);

                HTTP http = HTTP.SYNCHRONOUS;

                if (json.containsKey(PARAM_QUERY_HTTP))
                    http = HTTP.valueOf(json.get(PARAM_QUERY_HTTP).toString().toUpperCase());

                switch (http) {
                    case ASYNCHRONOUS:
                        log.info("Doing asynchronous petition ... ");

                        try {
                            priorityBlockingQueue.put(session);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }

                        response.status(200);
                        return "Petition completed!";

                    case SYNCHRONOUS:
                        log.info("Doing synchronous petition ... ");
                        CountDownLatch latch = new CountDownLatch(1);
                        session.attribute("latch", latch);

                        try {
                            priorityBlockingQueue.put(session);
                            latch.await();
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        response.status(200);
                        String jsonString = "";

                        try {
                            ArrayList<Map<String, Object>> jsonResult = session.attribute("finalResult");
                            jsonString = _mapper.writeValueAsString(jsonResult);
                        } catch (JsonProcessingException e) {
                            e.printStackTrace();
                        }

                        return jsonString;
                }

                response.status(400);
                return "Your SHA256 is not complete, It must consist of 64 hexadecimal characters";
            }

        });
    }

    private static void loadConfig() {
        try {
            String[] host = conf.get("malware.server").split(":");
            ipAddress = host[0];
            port = Integer.valueOf(host[1]);

        } catch (ConfigException e) {
            e.printStackTrace();
        }

    }

    public static int RESTPort() {
        return port;
    }

}


