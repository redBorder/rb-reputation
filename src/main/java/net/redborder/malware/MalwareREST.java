package net.redborder.malware;

import com.fasterxml.jackson.annotation.JsonRawValue;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import spark.Request;
import spark.Response;
import spark.Route;
import spark.Session;

import java.io.IOException;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.CountDownLatch;

import static spark.Spark.*;

import static spark.Spark.get;

public class MalwareREST {

    public enum OPERATION{
        QUERY("query"), TOTAL("total"), INCREMENTAL("incremental");

        public String value;

        OPERATION(String value){
            this.value = value;
        }
    }

    public enum HTTP{
        SYNC("synchronous"), ASYNC("asynchronous");

        public String value;

        HTTP(String value){
            this.value = value;
        }
    }

    public enum PROCESS{
        AGILE("agile"), COMPLETE("complete");

        public String value;

        PROCESS(String value){
            this.value = value;
        }
    }

    public enum RESPONSE{
        SIMPLE("simple"), VERBOSE("verbose");

        public String value;

        RESPONSE(String value){
            this.value = value;
        }
    }

    private static final Logger log = LoggerFactory.getLogger(MalwareREST.class);
    private static final Logger audit = LoggerFactory.getLogger("audit");

    public static final String PARAM_QUERY_RESPONSE = "response";
    public static final String PARAM_QUERY_HTTP = "http";
    public static final String PARAM_QUERY_PROCESS = "process";

    public static final String PARAM_API_OPERATION = "operation";

    public static final String PARAM_QUERY_HASH = "hash";

    private static String ipAddress = "0.0.0.0";
    private static int port = 4567;

    private static Config conf;

    private static BlockingQueue<Object> priorityBlockingQueue;

    public static void init(Config newConfig, final BlockingQueue<Object> priorityQueue) {

        conf = newConfig;
        priorityBlockingQueue = priorityQueue;

        loadConfig();
        setIpAddress(ipAddress);
        setPort(port);

        get(new Route("/malware/total") {

            @Override
            public Object handle(Request request, Response response) {

                CountDownLatch latch = new CountDownLatch(1);
                Session session = request.session(true);

                audit.info("Session with reputation engine created {}", session.raw().getCreationTime());

                session.attribute("latch", latch);
                session.attribute(PARAM_API_OPERATION, OPERATION.TOTAL);
                session.attribute(PARAM_QUERY_RESPONSE, RESPONSE.SIMPLE);
                session.attribute(PARAM_QUERY_PROCESS, PROCESS.COMPLETE);

                try {
                    priorityBlockingQueue.put(session);
                    latch.await();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                LinkedList<ArrayList<Map<String, Object>>> totalList = session.attribute("result");
                ObjectMapper mapper = new ObjectMapper();
                String json = "";

                try {
                    json = mapper.writeValueAsString(totalList);
                } catch (JsonProcessingException e) {
                    e.printStackTrace();
                }

                return json;
            }
        });

        post(new Route("/malware/incremental") {

            @Override
            public Object handle(Request request, Response response) {

                Session session = request.session(true);

                audit.info("Session with reputation engine created {}", session.raw().getCreationTime());

                ObjectMapper _mapper = new ObjectMapper();
                Map<String, Object> json = new HashMap<>();

                try {

                    if (!request.body().isEmpty()) {
                        json = _mapper.readValue(request.body(), new TypeReference<HashMap<String, Object>>() {
                        });
                    }


                } catch (IOException e) {
                    e.printStackTrace();
                }

                if (json.containsKey("incremental")) {
                    String id = json.get("incremental").toString();
                    ArrayList<Map<String, Object>> result = IncrementalList.getList(id);

                    if (!result.isEmpty()) {
                        response.status(200);
                        String jsonInc = "";

                        try {
                            jsonInc = _mapper.writeValueAsString(result);
                        } catch (JsonProcessingException e) {
                            e.printStackTrace();
                        }
                        return jsonInc;

                    } else {
                        response.status(404);
                        return String.format("%s Not found!", id);
                    }

                } else {
                    String value = IncrementalList.getValue(IncrementalList.Last.INCREMENTAL);

                    if (!value.matches("N/A"))
                        response.status(200);
                    else
                        response.status(404);

                    return value;
                }
            }
        });



        post(new Route("/malware/query") {

            @Override
            public Object handle(Request request, Response response) {

                    ObjectMapper _mapper = new ObjectMapper();
                    Map<String, Object> json = new HashMap<>();

                    Session session = request.session(true);
                    audit.info("Session with reputation engine created {}", session.raw().getCreationTime());

                    try {

                        if (!request.body().isEmpty()) {
                            json = _mapper.readValue(request.body(), new TypeReference<HashMap<String, Object>>() {
                            });

                            for(Map.Entry entry : json.entrySet()){
                                session.attribute(entry.getKey().toString(), entry.getValue());
                            }
                        }

                    } catch (IOException e) {
                        e.printStackTrace();
                    }

                    session.attribute(PARAM_API_OPERATION, OPERATION.QUERY);

                    if(json.containsKey(PARAM_QUERY_HASH))
                        session.attribute("query", json.get(PARAM_QUERY_HASH));
                    else{
                        response.status(400);
                        return "Param \"hash\" not found!";
                    }


                    if(json.containsKey(PARAM_QUERY_RESPONSE))
                        session.attribute(PARAM_QUERY_RESPONSE, RESPONSE.valueOf(json.get(PARAM_QUERY_RESPONSE).toString()));
                    else
                        session.attribute(PARAM_QUERY_RESPONSE, RESPONSE.SIMPLE);

                    if(json.containsKey(PARAM_QUERY_PROCESS))
                        session.attribute(PARAM_QUERY_PROCESS, PROCESS.valueOf(json.get(PARAM_QUERY_PROCESS).toString()));
                    else
                        session.attribute(PARAM_QUERY_PROCESS, PROCESS.AGILE);

                    HTTP http = HTTP.SYNC;

                    if(json.containsKey(PARAM_QUERY_HTTP))
                        http = HTTP.valueOf(json.get("PARAM_QUERY_HTTP").toString());

                    switch(http){
                        case ASYNC:
                            log.info("Doing asynchronous petition ... ");

                            try {
                                priorityBlockingQueue.put(session);
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }

                            response.status(200);
                            return "Petition completed!";

                        case SYNC:
                            log.info("Doing synchronous petition ... ");
                            CountDownLatch latch = new CountDownLatch(1);
                            session.attribute("latch", latch);

                            try {
                                priorityBlockingQueue.put(session);
                                latch.await();
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                            response.status(200);
                            return session.attribute("result");
                    }

                    response.status(400);
                    return "Your SHA256 is not complete, It must consist of 64 hexadecimal characters";
            }

        });
    }

    private static void loadConfig() {
        try {
            String[] host = conf.get("malware.server").split(":");
            ipAddress = host[0];
            port = Integer.valueOf(host[1]);

        } catch (ConfigException e) {
            e.printStackTrace();
        }

    }

    public static int RESTPort(){
        return port;
    }

}


