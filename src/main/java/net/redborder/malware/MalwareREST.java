package net.redborder.malware;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;
import net.redborder.malware.controllers.MalwareController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import spark.Request;
import spark.Response;
import spark.Route;
import spark.Session;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Executors;
import java.util.concurrent.PriorityBlockingQueue;

import static spark.Spark.*;

import static spark.Spark.get;

public class MalwareREST {

    private enum HTTP{
        SYNCHRONOUS, ASYNCHRONOUS
    }

    private static final Logger log = LoggerFactory.getLogger(MalwareREST.class);
    private static final Logger audit = LoggerFactory.getLogger("audit");

    private static String ipAddress = "0.0.0.0";
    private static int port = 4567;

    private static Config conf;

    private static BlockingQueue<Object> priorityBlockingQueue;

    public static void init(Config newConfig, final BlockingQueue<Object> priorityQueue) {

        conf = newConfig;
        priorityBlockingQueue = priorityQueue;

        loadConfig();
        setIpAddress(ipAddress);
        setPort(port);

        get(new Route("/malware/total") {

            @Override
            public Object handle(Request request, Response response) {

                CountDownLatch latch = new CountDownLatch(1);
                Session session = request.session(true);

                audit.info("Session with reputation engine created {}", session.raw().getCreationTime());

                session.attribute("latch", latch);
                session.attribute("operation", "total");

                try {
                    priorityBlockingQueue.put(session);
                    latch.await();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                return session.attribute("result");
            }
        });

        post(new Route("/malware/revision/") {

            @Override
            public Object handle(Request request, Response response) {

                Session session = request.session(true);

                audit.info("Session with reputation engine created {}", session.raw().getCreationTime());

                ObjectMapper _mapper = new ObjectMapper();
                Map<String, Object> json = new HashMap<>();

                try {

                    json = _mapper.readValue(request.body(), new TypeReference<HashMap<String, Object>>() {});


                } catch (IOException e) {
                    e.printStackTrace();
                }

                if(json.containsKey("last"))
                    return IncrementalList.getValue(IncrementalList.Last.valueOf(json.get("last").toString().toUpperCase()));


                response.status(400);
                return "<h3>Value \"last\" has not been specified</h3>";
            }
        });

        get(new Route("/malware/revision/:id") {

            @Override
            public Object handle(Request request, Response response) {

                Session session = request.session(true);
                audit.info("Session with reputation engine created {}", session.raw().getCreationTime());
                String result = IncrementalList.getList(request.params(":id")).toString();
                if(result.compareTo("N/A") == 0) {
                    response.status(404);
                    return response;
                }else {
                    response.status(200);
                }

                return result;
            }

        });

        post(new Route("/malware/query/") {

            @Override
            public Object handle(Request request, Response response) {

                    ObjectMapper _mapper = new ObjectMapper();
                    Map<String, Object> json = new HashMap<>();

                    Session session = request.session(true);
                    audit.info("Session with reputation engine created {}", session.raw().getCreationTime());

                    try {

                        if (!request.body().isEmpty()) {
                            json = _mapper.readValue(request.body(), new TypeReference<HashMap<String, Object>>() {
                            });

                            for(Map.Entry entry : json.entrySet()){
                                session.attribute(entry.getKey().toString(), entry.getValue());
                            }
                        }

                    } catch (IOException e) {
                        e.printStackTrace();
                    }

                    session.attribute("operation", "query");
                    session.attribute("query", json.get("hash"));

                    if(json.containsKey("response"))
                        session.attribute("response", json.get("response"));
                    else
                        session.attribute("response", "simple");

                    if(json.containsKey("processing"))
                        session.attribute("processing", json.get("processing"));
                    else
                        session.attribute("processing", "agile");

                    String http = "synchronous";

                    if(json.containsKey("http")){
                        http = json.get("http").toString();
                    }

                    switch(HTTP.valueOf(http.toUpperCase())){
                        case ASYNCHRONOUS:
                            log.info("Doing asynchronous petition ... ");
                            try {
                                priorityBlockingQueue.put(session);
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }

                            response.status(200);
                            return "Petition completed!";

                        case SYNCHRONOUS:
                            log.info("Doing synchronous petition ... ");
                            CountDownLatch latch = new CountDownLatch(1);
                            session.attribute("latch", latch);

                            try {
                                priorityBlockingQueue.put(session);
                                latch.await();
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                            response.status(200);
                            return session.attribute("result");
                    }

                    response.status(400);
                    return "Your SHA256 is not complete, It must consist of 64 hexadecimal characters";
            }

        });
    }

    private static void loadConfig() {
        try {
            String[] host = conf.get("malware.server").split(":");
            ipAddress = host[0];
            port = Integer.valueOf(host[1]);

        } catch (ConfigException e) {
            e.printStackTrace();
        }

    }

    private static int port(){
        return port();
    }

}


