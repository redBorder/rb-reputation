package net.redborder.malware;

import net.redborder.malware.config.Config;
import net.redborder.malware.config.ConfigException;
import net.redborder.malware.controllers.MalwareController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import spark.Request;
import spark.Response;
import spark.Route;

import static spark.Spark.*;

import java.util.*;

import static spark.Spark.get;

public class MalwareREST {

    private static final Logger log = LoggerFactory.getLogger(MalwareREST.class);

    private static String ipAddress = "0.0.0.0";
    private static int port = 4567;

    private static Config conf;

    private static MalwareController mc = null;


    public static void init(Config newConfig) {
        conf = newConfig;

        loadConfig();
        setIpAddress(ipAddress);
        setPort(port);

        get(new Route("/malware/total") {
            @Override
            public Object handle(Request request, Response response) {
                return mc.generateTotal();
            }
        });

        get(new Route("/malware/revision/") {
            @Override
            public Object handle(Request request, Response response) {
                return mc.getRevisionNumber();
            }
        });

        get(new Route("/malware/revision/:num") {
            @Override
            public Object handle(Request request, Response response) {
                return mc.generateRevision(Integer.valueOf(request.params(":num")));
            }
        });

        get(new Route("/malware/:sha") {

            @Override
            public Object handle(Request request, Response response) {
                String sha256 = request.params(":sha");

                if (sha256.matches("[A-Fa-f0-9]{64}")) {

                    Map<String, Object> result = mc.getDataForSHA(sha256);

                    Map<String, Object> mapJson = new HashMap<String, Object>();

                    mapJson.put(sha256, result.get("malware_name"));

                    return mapJson;

                } else {
                    return "Your SHA256 is not complete, It must consist of 64 hexadecimal characters";
                }
            }


        });
    }

    public static int getPort(){
        return getPort();
    }

    public static void setController(MalwareController mcont){
        mc = mcont;
    }

    private static void loadConfig() {
        try {
            String[] host = conf.get("malware.server").split(":");
            ipAddress = host[0];
            port = Integer.valueOf(host[1]);

        } catch (ConfigException e) {
            e.printStackTrace();
        }

    }

}


